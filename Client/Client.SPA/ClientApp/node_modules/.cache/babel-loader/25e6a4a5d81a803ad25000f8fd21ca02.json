{"ast":null,"code":"import _regeneratorRuntime from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(watchAuth),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchBank),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(cancelWorkerSaga);\n\nimport { all, takeLatest, cancel, take, fork } from 'redux-saga/effects';\nimport { autoSignInSaga, checkAuthTimeoutSaga, signInSaga, signOutSaga } from './auth'; //import { fetchCountriesSaga, selectCountrySaga, selectCitySaga } from './location';\n\nimport { fetchBanksSaga, fetchBankSaga, fetchBanksCountSaga, deleteBankSaga, saveBankSaga, uploadBankLogoSaga, removeBankLogoSaga } from './bank';\nimport * as authActionTypes from '../actions/authActionTypes'; //import * as locationActionTypes from '../actions/locationActionTypes';\n\nimport * as bankActionTypes from '../actions/bankActionTypes';\nexport function watchAuth() {\n  var payload, bgSyncTask;\n  return _regeneratorRuntime.wrap(function watchAuth$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([takeLatest(authActionTypes.AUTO_SIGN_IN, autoSignInSaga), takeLatest(authActionTypes.SIGN_IN_START, signInSaga), takeLatest(authActionTypes.SIGN_OUT, signOutSaga) //takeLatest(authActionTypes.CHECK_AUTH_TIMEOUT, checkAuthTimeoutSaga);\n          ]);\n\n        case 2:\n          _context.next = 4;\n          return take(authActionTypes.CHECK_AUTH_TIMEOUT);\n\n        case 4:\n          if (!(payload = _context.sent)) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 7;\n          return fork(checkAuthTimeoutSaga, payload);\n\n        case 7:\n          bgSyncTask = _context.sent;\n          _context.next = 10;\n          return takeLatest(authActionTypes.STOP_AUTH_TIMER, cancelWorkerSaga, bgSyncTask);\n\n        case 10:\n          _context.next = 2;\n          break;\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} //function* watchCheckAuthTimeout() {\n//    yield takeLatest(authActionTypes.CHECK_AUTH_TIMEOUT, checkAuthTimeoutSaga);\n//}\n//export function* watchLocation() {\n//    yield all([\n//        takeLatest(locationActionTypes.FETCH_COUNTRIES, fetchCountriesSaga),\n//        takeLatest(locationActionTypes.SELECT_COUNTRY, selectCountrySaga),\n//        takeLatest(locationActionTypes.SELECT_CITY, selectCitySaga)\n//    ]);\n//}\n\nexport function watchBank() {\n  return _regeneratorRuntime.wrap(function watchBank$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeLatest(bankActionTypes.FETCH_BANKS, fetchBanksSaga), takeLatest(bankActionTypes.FETCH_BANKS_COUNT, fetchBanksCountSaga), takeLatest(bankActionTypes.FETCH_BANK, fetchBankSaga), takeLatest(bankActionTypes.UPLOAD_BANK_LOGO, uploadBankLogoSaga), takeLatest(bankActionTypes.REMOVE_BANK_PHOTO, removeBankLogoSaga), takeLatest(bankActionTypes.SAVE_BANK, saveBankSaga), takeLatest(bankActionTypes.DELETE_BANK, deleteBankSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction cancelWorkerSaga(task) {\n  return _regeneratorRuntime.wrap(function cancelWorkerSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return cancel(task);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/store/sagas/index.ts"],"names":["watchAuth","watchBank","cancelWorkerSaga","all","takeLatest","cancel","take","fork","autoSignInSaga","checkAuthTimeoutSaga","signInSaga","signOutSaga","fetchBanksSaga","fetchBankSaga","fetchBanksCountSaga","deleteBankSaga","saveBankSaga","uploadBankLogoSaga","removeBankLogoSaga","authActionTypes","bankActionTypes","AUTO_SIGN_IN","SIGN_IN_START","SIGN_OUT","CHECK_AUTH_TIMEOUT","payload","bgSyncTask","STOP_AUTH_TIMER","FETCH_BANKS","FETCH_BANKS_COUNT","FETCH_BANK","UPLOAD_BANK_LOGO","REMOVE_BANK_PHOTO","SAVE_BANK","DELETE_BANK","task"],"mappings":";;oDASiBA,S;qDAyCAC,S;qDAYPC,gB;;AA9DV,SAASC,GAAT,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwCC,IAAxC,QAAkF,oBAAlF;AAEA,SAASC,cAAT,EAAyBC,oBAAzB,EAA+CC,UAA/C,EAA2DC,WAA3D,QAA8E,QAA9E,C,CACA;;AACA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,mBAAxC,EAA6DC,cAA7D,EAA6EC,YAA7E,EAA2FC,kBAA3F,EAA+GC,kBAA/G,QAAyI,QAAzI;AACA,OAAO,KAAKC,eAAZ,MAAiC,4BAAjC,C,CACA;;AACA,OAAO,KAAKC,eAAZ,MAAiC,4BAAjC;AAEA,OAAO,SAAUpB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMG,GAAG,CAAC,CACNC,UAAU,CAACe,eAAe,CAACE,YAAjB,EAA+Bb,cAA/B,CADJ,EAENJ,UAAU,CAACe,eAAe,CAACG,aAAjB,EAAgCZ,UAAhC,CAFJ,EAGNN,UAAU,CAACe,eAAe,CAACI,QAAjB,EAA2BZ,WAA3B,CAHJ,CAIN;AAJM,WAAD,CAAT;;AADG;AAAA;AAec,iBAAML,IAAI,CAACa,eAAe,CAACK,kBAAjB,CAAV;;AAfd;AAAA,gBAeIC,OAfJ;AAAA;AAAA;AAAA;;AAAA;AAiBgC,iBAAMlB,IAAI,CAACE,oBAAD,EAAuBgB,OAAvB,CAAV;;AAjBhC;AAiBOC,UAAAA,UAjBP;AAAA;AAyBC,iBAAMtB,UAAU,CAACe,eAAe,CAACQ,eAAjB,EAAkCzB,gBAAlC,EAAoDwB,UAApD,CAAhB;;AAzBD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CA6BP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAAUzB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAME,GAAG,CAAC,CACNC,UAAU,CAACgB,eAAe,CAACQ,WAAjB,EAA8BhB,cAA9B,CADJ,EAENR,UAAU,CAACgB,eAAe,CAACS,iBAAjB,EAAoCf,mBAApC,CAFJ,EAGNV,UAAU,CAACgB,eAAe,CAACU,UAAjB,EAA6BjB,aAA7B,CAHJ,EAINT,UAAU,CAACgB,eAAe,CAACW,gBAAjB,EAAmCd,kBAAnC,CAJJ,EAKNb,UAAU,CAACgB,eAAe,CAACY,iBAAjB,EAAoCd,kBAApC,CALJ,EAMNd,UAAU,CAACgB,eAAe,CAACa,SAAjB,EAA4BjB,YAA5B,CANJ,EAONZ,UAAU,CAACgB,eAAe,CAACc,WAAjB,EAA8BnB,cAA9B,CAPJ,CAAD,CAAT;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYP,SAAUb,gBAAV,CAA2BiC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAM9B,MAAM,CAAC8B,IAAD,CAAZ;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeLatest, cancel, take, fork, call, TakeEffect, ForkEffect } from 'redux-saga/effects';\r\n\r\nimport { autoSignInSaga, checkAuthTimeoutSaga, signInSaga, signOutSaga } from './auth';\r\n//import { fetchCountriesSaga, selectCountrySaga, selectCitySaga } from './location';\r\nimport { fetchBanksSaga, fetchBankSaga, fetchBanksCountSaga, deleteBankSaga, saveBankSaga, uploadBankLogoSaga, removeBankLogoSaga } from './bank';\r\nimport * as authActionTypes from '../actions/authActionTypes';\r\n//import * as locationActionTypes from '../actions/locationActionTypes';\r\nimport * as bankActionTypes from '../actions/bankActionTypes';\r\n\r\nexport function* watchAuth() {\r\n    yield all([\r\n        takeLatest(authActionTypes.AUTO_SIGN_IN, autoSignInSaga),\r\n        takeLatest(authActionTypes.SIGN_IN_START, signInSaga),\r\n        takeLatest(authActionTypes.SIGN_OUT, signOutSaga),\r\n        //takeLatest(authActionTypes.CHECK_AUTH_TIMEOUT, checkAuthTimeoutSaga);\r\n    ]);\r\n\r\n    //while (true) {\r\n    //    const payload = yield take(authActionTypes.CHECK_AUTH_TIMEOUT);\r\n    //    const bgSyncTask = yield fork(checkAuthTimeoutSaga, payload);\r\n    //    yield takeLatest(authActionTypes.STOP_AUTH_TIMER, cancelWorkerSaga, bgSyncTask);\r\n    //}\r\n    // Or\r\n    let payload: TakeEffect;\r\n    while (payload = yield take(authActionTypes.CHECK_AUTH_TIMEOUT)) {\r\n        // starts the task in the background\r\n        const bgSyncTask: ForkEffect = yield fork(checkAuthTimeoutSaga, payload);\r\n\r\n        //// wait for the user to sign out\r\n        //yield take(authActionTypes.STOP_AUTH_TIMER);\r\n        //// user signed out. cancel the background task\r\n        //// this will cause the forked bgSync task to jump into its finally block\r\n        //yield cancel(bgSyncTask);\r\n        // Or\r\n        yield takeLatest(authActionTypes.STOP_AUTH_TIMER, cancelWorkerSaga, bgSyncTask);\r\n    }\r\n}\r\n\r\n//function* watchCheckAuthTimeout() {\r\n//    yield takeLatest(authActionTypes.CHECK_AUTH_TIMEOUT, checkAuthTimeoutSaga);\r\n//}\r\n\r\n//export function* watchLocation() {\r\n//    yield all([\r\n//        takeLatest(locationActionTypes.FETCH_COUNTRIES, fetchCountriesSaga),\r\n//        takeLatest(locationActionTypes.SELECT_COUNTRY, selectCountrySaga),\r\n//        takeLatest(locationActionTypes.SELECT_CITY, selectCitySaga)\r\n//    ]);\r\n//}\r\n\r\nexport function* watchBank() {\r\n    yield all([\r\n        takeLatest(bankActionTypes.FETCH_BANKS, fetchBanksSaga),\r\n        takeLatest(bankActionTypes.FETCH_BANKS_COUNT, fetchBanksCountSaga),\r\n        takeLatest(bankActionTypes.FETCH_BANK, fetchBankSaga),\r\n        takeLatest(bankActionTypes.UPLOAD_BANK_LOGO, uploadBankLogoSaga),\r\n        takeLatest(bankActionTypes.REMOVE_BANK_PHOTO, removeBankLogoSaga),\r\n        takeLatest(bankActionTypes.SAVE_BANK, saveBankSaga),\r\n        takeLatest(bankActionTypes.DELETE_BANK, deleteBankSaga),\r\n    ]);\r\n}\r\n\r\nfunction* cancelWorkerSaga(task: any) {\r\n    yield cancel(task);\r\n}"]},"metadata":{},"sourceType":"module"}