{"ast":null,"code":"import axios from 'axios';\nimport { getErrorMessage } from './utility'; //import * as https from 'https';\n//const httpsAgent = new https.Agent({ rejectUnauthorized: false });\n\nvar cancelSource = axios.CancelToken.source();\nvar axiosInstance = axios.create({\n  baseURL: 'https://localhost:5101/gateway' //cancelToken: cancelSource.token\n  //httpsAgent: httpsAgent\n\n}); //instance.default.headers.common['Authorization'] = 'Auth Token dgdfgdfg';\n//instance.default.headers.post['Content-Type'] = 'application/json';\n\nvar redundantErrorMessage = 'Error: Request failed with status code ';\naxiosInstance.interceptors.request.use(function (requestConfig) {\n  return requestConfig;\n}, function (error) {\n  console.log('axiosInstance request error');\n  console.log(error);\n  var httpErrorMessage = getHttpErrorMessage(error);\n  console.log(httpErrorMessage);\n  return Promise.reject(httpErrorMessage);\n});\naxiosInstance.interceptors.response.use(function (responseConfig) {\n  return responseConfig;\n}, function (error) {\n  console.log('axiosInstance response error');\n  console.log(error);\n  var httpErrorMessage = getHttpErrorMessage(error);\n  console.log(httpErrorMessage);\n  return Promise.reject(httpErrorMessage);\n});\n\nvar getHttpErrorMessage = function getHttpErrorMessage(error) {\n  var errorCode = parseInt(error.toString().replace(redundantErrorMessage, ''));\n  var httpError = errorCode;\n  return getErrorMessage(httpError);\n};\n\nexport default axiosInstance;","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/shared/axios-instance.ts"],"names":["axios","getErrorMessage","cancelSource","CancelToken","source","axiosInstance","create","baseURL","redundantErrorMessage","interceptors","request","use","requestConfig","error","console","log","httpErrorMessage","getHttpErrorMessage","Promise","reject","response","responseConfig","errorCode","parseInt","toString","replace","httpError"],"mappings":"AAAA,OAAOA,KAAP,MAAwE,OAAxE;AAEA,SAASC,eAAT,QAAgC,WAAhC,C,CACA;AAEA;;AACA,IAAMC,YAAY,GAAGF,KAAK,CAACG,WAAN,CAAkBC,MAAlB,EAArB;AAEA,IAAMC,aAA4B,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC9CC,EAAAA,OAAO,EAAE,gCADqC,CAE9C;AACA;;AAH8C,CAAb,CAArC,C,CAMA;AACA;;AAEA,IAAMC,qBAAqB,GAAG,yCAA9B;AAEAH,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,UAACC,aAAD,EAAuC;AAC1E,SAAOA,aAAP;AACH,CAFD,EAEG,UAACC,KAAD,EAAgB;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,MAAMG,gBAAwB,GAAGC,mBAAmB,CAACJ,KAAD,CAApD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeH,gBAAf,CAAP;AACH,CARD;AAUAX,aAAa,CAACI,YAAd,CAA2BW,QAA3B,CAAoCT,GAApC,CAAwC,UAACU,cAAD,EAAmC;AACvE,SAAOA,cAAP;AACH,CAFD,EAEG,UAACR,KAAD,EAAgB;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,MAAMG,gBAAwB,GAAGC,mBAAmB,CAACJ,KAAD,CAApD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeH,gBAAf,CAAP;AACH,CARD;;AAUA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACJ,KAAD,EAAwB;AAChD,MAAMS,SAAiB,GAAGC,QAAQ,CAACV,KAAK,CAACW,QAAN,GAAiBC,OAAjB,CAAyBjB,qBAAzB,EAAgD,EAAhD,CAAD,CAAlC;AACA,MAAMkB,SAAwB,GAAGJ,SAAjC;AACA,SAAOrB,eAAe,CAACyB,SAAD,CAAtB;AACH,CAJD;;AAMA,eAAerB,aAAf","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { HttpErrorEnum } from './enums';\r\nimport { getErrorMessage } from './utility';\r\n//import * as https from 'https';\r\n\r\n//const httpsAgent = new https.Agent({ rejectUnauthorized: false });\r\nconst cancelSource = axios.CancelToken.source();\r\n\r\nconst axiosInstance: AxiosInstance = axios.create({\r\n    baseURL: 'https://localhost:5101/gateway',\r\n    //cancelToken: cancelSource.token\r\n    //httpsAgent: httpsAgent\r\n});\r\n\r\n//instance.default.headers.common['Authorization'] = 'Auth Token dgdfgdfg';\r\n//instance.default.headers.post['Content-Type'] = 'application/json';\r\n\r\nconst redundantErrorMessage = 'Error: Request failed with status code ';\r\n\r\naxiosInstance.interceptors.request.use((requestConfig: AxiosRequestConfig) => {\r\n    return requestConfig;\r\n}, (error: any) => {\r\n    console.log('axiosInstance request error');\r\n    console.log(error);\r\n    const httpErrorMessage: string = getHttpErrorMessage(error);\r\n    console.log(httpErrorMessage);\r\n    return Promise.reject(httpErrorMessage);\r\n});\r\n\r\naxiosInstance.interceptors.response.use((responseConfig: AxiosResponse) => {\r\n    return responseConfig;\r\n}, (error: any) => {\r\n    console.log('axiosInstance response error');\r\n    console.log(error);\r\n    const httpErrorMessage: string = getHttpErrorMessage(error);\r\n    console.log(httpErrorMessage);\r\n    return Promise.reject(httpErrorMessage);\r\n});\r\n\r\nconst getHttpErrorMessage = (error: any): string => {\r\n    const errorCode: number = parseInt(error.toString().replace(redundantErrorMessage, ''));\r\n    const httpError: HttpErrorEnum = errorCode as HttpErrorEnum;\r\n    return getErrorMessage(httpError);\r\n};\r\n\r\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}