{"ast":null,"code":"import _defineProperty from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as Constants from \"./constants\";\nimport { HttpErrorEnum } from \"./enums\";\nexport var updateObject = function updateObject(oldObject, updatedProperties) {\n  return _objectSpread(_objectSpread({}, oldObject), {}, {\n    updatedProperties: updatedProperties\n  });\n};\nexport var getFormElements = function getFormElements(formControls) {\n  var formElements = [];\n\n  for (var key in formControls) {\n    formElements.push({\n      id: key,\n      content: formControls[key]\n    });\n  }\n\n  return formElements;\n}; //export const getUpdatedForm = (event: { target: HTMLInputElement }, formControls, controlId) => {\n\nexport var getUpdatedForm = function getUpdatedForm(event, formControls, controlId) {\n  var isControlValid = checkValidity(event.target.value, formControls[controlId].validation);\n\n  var updatedForm = _objectSpread(_objectSpread({}, formControls), {}, _defineProperty({}, controlId, _objectSpread(_objectSpread({}, formControls[controlId]), {}, {\n    value: event.target.value,\n    valid: isControlValid,\n    touched: true\n  })));\n\n  return updatedForm;\n};\nexport var ValidateForm = function ValidateForm(formControls) {\n  var isValid = true;\n\n  for (var controlId in formControls) {\n    if (!formControls[controlId].valid) {\n      isValid = false;\n      break;\n    }\n  }\n\n  return isValid;\n};\nexport var checkValidity = function checkValidity(value, rules) {\n  if (!rules) {\n    return true;\n  }\n\n  if (rules.required) {\n    if (!value || value.toString().trim() === '') {\n      return false;\n    }\n  }\n\n  if (rules.minLength) {\n    if (value.toString().length < rules.minLength) {\n      return false;\n    }\n  }\n\n  if (rules.maxLength) {\n    if (value.toString().length > rules.maxLength) {\n      return false;\n    }\n  }\n\n  if (rules.min) {\n    if (value < rules.min) {\n      return false;\n    }\n  }\n\n  if (rules.max) {\n    if (value > rules.max) {\n      return false;\n    }\n  }\n\n  if (rules.email) {\n    var emailRegEx = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (!emailRegEx.test(value.toString())) {\n      return false;\n    }\n  }\n\n  if (rules.pattern) {\n    if (!new RegExp(rules.pattern).test(value.toString())) {\n      return false;\n    }\n  }\n\n  return true;\n};\nexport var disableForm = function disableForm(formControls, isDisabled) {\n  var updatedForm = _objectSpread({}, formControls);\n\n  for (var inputId in updatedForm) {\n    formControls[inputId].disabled = isDisabled;\n  }\n\n  return updatedForm;\n};\nexport var getErrorMessage = function getErrorMessage(error) {\n  switch (error) {\n    case HttpErrorEnum.Unauthorized:\n      return Constants.ERROR_UNAUTHORIZED;\n\n    case HttpErrorEnum.Forbidden:\n      return Constants.ERROR_FORBIDDEN;\n\n    case HttpErrorEnum.BadRequest:\n      return Constants.ERROR_BAD_REQUEST;\n\n    case HttpErrorEnum.BadGateway:\n      return Constants.ERROR_BAD_GATEWAY;\n\n    case HttpErrorEnum.NotFound:\n    case HttpErrorEnum.InternalServerError:\n    default:\n      return Constants.ERROR_UNKNOWN;\n  }\n};","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/shared/utility.ts"],"names":["Constants","HttpErrorEnum","updateObject","oldObject","updatedProperties","getFormElements","formControls","formElements","key","push","id","content","getUpdatedForm","event","controlId","isControlValid","checkValidity","target","value","validation","updatedForm","valid","touched","ValidateForm","isValid","rules","required","toString","trim","minLength","length","maxLength","min","max","email","emailRegEx","test","pattern","RegExp","disableForm","isDisabled","inputId","disabled","getErrorMessage","error","Unauthorized","ERROR_UNAUTHORIZED","Forbidden","ERROR_FORBIDDEN","BadRequest","ERROR_BAD_REQUEST","BadGateway","ERROR_BAD_GATEWAY","NotFound","InternalServerError","ERROR_UNKNOWN"],"mappings":"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","sourcesContent":["import { ChangeEvent, FormEvent, SyntheticEvent } from \"react\";\r\nimport * as Constants from \"./constants\";\r\nimport { HttpErrorEnum } from \"./enums\";\r\nimport { Dictionary, FormControlElementContent, Validation, FormControlElement } from \"./types\";\r\n\r\nexport const updateObject = <T>(oldObject: T, updatedProperties: any) => {\r\n    return {\r\n        ...oldObject,\r\n        updatedProperties\r\n    };\r\n};\r\n\r\nexport const getFormElements = (formControls: Dictionary<FormControlElementContent>): FormControlElement[] => {\r\n    const formElements: FormControlElement[] = [];\r\n    for (const key in formControls) {\r\n        formElements.push({\r\n            id: key,\r\n            content: formControls[key]\r\n        });\r\n    }\r\n    return formElements;\r\n};\r\n\r\n//export const getUpdatedForm = (event: { target: HTMLInputElement }, formControls, controlId) => {\r\nexport const getUpdatedForm = (\r\n    event: SyntheticEvent<Element>,\r\n    formControls: Dictionary<FormControlElementContent>,\r\n    controlId: string): Dictionary<FormControlElementContent> => {\r\n    const isControlValid = checkValidity((event.target as HTMLInputElement).value, formControls[controlId].validation);\r\n    const updatedForm = {\r\n        ...formControls,\r\n        [controlId]: {\r\n            ...formControls[controlId],\r\n            value: (event.target as HTMLInputElement).value,\r\n            valid: isControlValid,\r\n            touched: true\r\n        }\r\n    };\r\n    return updatedForm;\r\n};\r\n\r\nexport const ValidateForm = (formControls: Dictionary<FormControlElementContent>): boolean => {\r\n    let isValid: boolean = true;\r\n    for (const controlId in formControls) {\r\n        if (!formControls[controlId].valid) {\r\n            isValid = false;\r\n            break;\r\n        }\r\n    }\r\n    return isValid;\r\n};\r\n\r\nexport const checkValidity = (value: string | number, rules?: Validation): boolean => {\r\n    if (!rules) {\r\n        return true;\r\n    }\r\n\r\n    if (rules.required) {\r\n        if (!value || value.toString().trim() === '') {\r\n            return false;\r\n        }\r\n    }\r\n    if (rules.minLength) {\r\n        if (value.toString().length < rules.minLength) {\r\n            return false;\r\n        }\r\n    }\r\n    if (rules.maxLength) {\r\n        if (value.toString().length > rules.maxLength) {\r\n            return false;\r\n        }\r\n    }\r\n    if (rules.min) {\r\n        if (value < rules.min) {\r\n            return false;\r\n        }\r\n    }\r\n    if (rules.max) {\r\n        if (value > rules.max) {\r\n            return false;\r\n        }\r\n    }\r\n    if (rules.email) {\r\n        const emailRegEx: RegExp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (!emailRegEx.test(value.toString())) {\r\n            return false;\r\n        }\r\n    }\r\n    if (rules.pattern) {\r\n        if (!new RegExp(rules.pattern).test(value.toString())) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nexport const disableForm = (formControls: Dictionary<FormControlElementContent>, isDisabled: boolean)\r\n    : Dictionary<FormControlElementContent> => {\r\n    const updatedForm: Dictionary<FormControlElementContent> = { ...formControls };\r\n    for (const inputId in updatedForm) {\r\n        formControls[inputId].disabled = isDisabled;\r\n    }\r\n    return updatedForm;\r\n};\r\n\r\nexport const getErrorMessage = (error: HttpErrorEnum): string => {\r\n    switch (error) {\r\n        case HttpErrorEnum.Unauthorized:\r\n            return Constants.ERROR_UNAUTHORIZED;\r\n        case HttpErrorEnum.Forbidden:\r\n            return Constants.ERROR_FORBIDDEN;\r\n        case HttpErrorEnum.BadRequest:\r\n            return Constants.ERROR_BAD_REQUEST;\r\n        case HttpErrorEnum.BadGateway:\r\n            return Constants.ERROR_BAD_GATEWAY;\r\n        case HttpErrorEnum.NotFound:\r\n        case HttpErrorEnum.InternalServerError:\r\n        default:\r\n            return Constants.ERROR_UNKNOWN;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}