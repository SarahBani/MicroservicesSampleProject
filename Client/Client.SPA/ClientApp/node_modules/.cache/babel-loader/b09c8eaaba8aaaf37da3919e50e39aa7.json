{"ast":null,"code":"import _defineProperty from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"H:\\\\Project\\\\Microservices\\\\MicroservicesSampleProject\\\\Client\\\\Client.SPA\\\\ClientApp\\\\src\\\\components\\\\Banks\\\\BankEdit\\\\BankEdit.tsx\",\n    _this = this;\n\nimport * as React from 'react';\nimport { useState, useEffect, useCallback, useMemo, memo } from 'react';\nimport { Redirect, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUpdatedForm, getFormElements, ValidateForm } from '../../../shared/utility';\nimport FormElement from '../../UI/FormElement/FormElement';\nimport ConfirmDelete from '../../UI/ConfirmDelete/ConfirmDelete';\nimport Modal from '../../UI/Modal/Modal';\nimport { SuccessfulOperationEnum, FailedOperationEnum, ElementTypeEnum, ModalTypeEnum, ElementConfigTypeEnum } from '../../../shared/enums';\nimport * as actions from '../../../store/actions/bankActions';\nimport * as authActions from '../../../store/actions/authActions'; //import * as locationActions from '../../../store/actions/locationActions';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nvar initialFormState = {\n  name: {\n    elementType: ElementTypeEnum.Input,\n    elementConfig: {\n      type: ElementConfigTypeEnum.Text,\n      placeholder: 'Name'\n    },\n    value: '',\n    validation: {\n      required: true\n    },\n    valid: false\n  },\n  //grade: {\n  //    elementType: ElementTypeEnum.Input,\n  //    elementConfig: {\n  //        type: ElementConfigTypeEnum.Number,\n  //        placeholder: 'Grade',\n  //    },\n  //    value: '',\n  //    validation: {\n  //        required: true\n  //    },\n  //    valid: false\n  //}\n  grade: {\n    elementType: ElementTypeEnum.Select,\n    elementConfig: {\n      placeholder: 'Grade',\n      options: [{\n        value: '',\n        text: '---'\n      }, {\n        value: '1',\n        text: 'A'\n      }, {\n        value: '2',\n        text: 'B'\n      }, {\n        value: '3',\n        text: 'C'\n      }, {\n        value: '4',\n        text: 'D'\n      }, {\n        value: '5',\n        text: 'E'\n      }]\n    },\n    value: '',\n    validation: {},\n    valid: true\n  }\n};\nvar BankEdit = /*#__PURE__*/memo(function (_ref) {\n  var id = _ref.id;\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      bank: state.bank.selectedBank,\n      loggedIn: state.auth.loggedIn,\n      token: state.auth.token,\n      loading: state.common.isLoading,\n      successfulOperation: state.common.successfulOperation,\n      failedOperation: state.common.failedOperation\n    };\n  }),\n      bank = _useSelector.bank,\n      loggedIn = _useSelector.loggedIn,\n      token = _useSelector.token,\n      loading = _useSelector.loading,\n      successfulOperation = _useSelector.successfulOperation,\n      failedOperation = _useSelector.failedOperation;\n\n  var dispatch = useDispatch();\n  var location = useLocation();\n\n  var _useState = useState(initialFormState),\n      _useState2 = _slicedToArray(_useState, 2),\n      formControls = _useState2[0],\n      setFormControls = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFormValid = _useState4[0],\n      setIsFormValid = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      redirect = _useState6[0],\n      setRedirect = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isDeleteConfirmShown = _useState8[0],\n      setIsDeleteConfirmShown = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isInitializing = _useState10[0],\n      setIsInitializing = _useState10[1];\n\n  useEffect(function () {\n    if (failedOperation && failedOperation === FailedOperationEnum.FetchBank) {\n      setRedirect( /*#__PURE__*/_jsxDEV(Redirect, {\n        to: '/banks'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, _this));\n    }\n  }, [failedOperation]);\n  useEffect(function () {\n    if (!loggedIn) {\n      dispatch(authActions.setAuthRedirectPath(location.pathname));\n      setRedirect( /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/auth/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }, _this));\n    }\n  }, [loggedIn]);\n  useEffect(function () {\n    if (!bank) {\n      dispatch(actions.fetchBank(id));\n    }\n  }, [id]);\n  useEffect(function () {\n    var updatedForm = _objectSpread({}, formControls);\n\n    if (bank && updatedForm && isInitializing) {\n      var _bank$grade$toString, _bank$grade, _objectSpread2;\n\n      updatedForm = _objectSpread(_objectSpread({}, updatedForm), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, 'name', _objectSpread(_objectSpread({}, updatedForm['name']), {}, {\n        value: bank.name,\n        valid: true\n      })), _defineProperty(_objectSpread2, 'grade', _objectSpread(_objectSpread({}, updatedForm['grade']), {}, {\n        value: (_bank$grade$toString = (_bank$grade = bank.grade) === null || _bank$grade === void 0 ? void 0 : _bank$grade.toString()) !== null && _bank$grade$toString !== void 0 ? _bank$grade$toString : '',\n        valid: true\n      })), _objectSpread2));\n      setIsInitializing(false);\n    }\n\n    setFormControls(updatedForm);\n  }, [bank]);\n  useEffect(function () {\n    setIsFormValid(ValidateForm(formControls));\n  }, [formControls]);\n  useEffect(function () {\n    switch (successfulOperation) {\n      case SuccessfulOperationEnum.Update:\n        cancelHandler();\n        break;\n\n      case SuccessfulOperationEnum.Delete:\n        setRedirect( /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/banks/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, _this));\n        break;\n    }\n  }, [successfulOperation]);\n\n  var elementHandler = function elementHandler(event, id) {\n    setFormControls(getUpdatedForm(event, formControls, id));\n  };\n\n  var cancelHandler = useCallback(function () {\n    setRedirect( /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/banks/\".concat(id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }, _this));\n  }, [id, setRedirect]);\n\n  var saveHandler = function saveHandler(event) {\n    event.preventDefault();\n    var bank = {\n      id: id,\n      name: formControls.name.value.toString(),\n      grade: formControls.grade.value ? parseInt(formControls.grade.value.toString()) : undefined\n    };\n    dispatch(actions.saveBank(bank, token));\n  };\n\n  var deleteConfirmContent = useMemo(function () {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isShown: isDeleteConfirmShown,\n      type: ModalTypeEnum.Component,\n      children: /*#__PURE__*/_jsxDEV(ConfirmDelete, {\n        onOK: function onOK() {\n          return confirmDeleteHandler(true);\n        },\n        onCancel: function onCancel() {\n          return confirmDeleteHandler(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, _this);\n  }, [isDeleteConfirmShown]);\n  var deleteHandler = useCallback(function () {\n    setIsDeleteConfirmShown(true);\n  }, [setIsDeleteConfirmShown]);\n  var confirmDeleteHandler = useCallback(function (isConfirmed) {\n    if (isConfirmed) {\n      dispatch(actions.deleteBank(id, token));\n    }\n\n    setIsDeleteConfirmShown(false);\n  }, [id, token, setIsDeleteConfirmShown]);\n  var formElements = getFormElements(formControls).map(function (formElement) {\n    return /*#__PURE__*/_jsxDEV(FormElement, {\n      formElement: formElement,\n      onChange: function onChange(event) {\n        return elementHandler(event, formElement.id);\n      },\n      onLostFocus: function onLostFocus(event) {\n        return elementHandler(event, formElement.id);\n      }\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [redirect, deleteConfirmContent, /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: saveHandler,\n      children: [formElements, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"reset\",\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            type: \"submit\",\n            disabled: !isFormValid || loading,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            type: \"button\",\n            onClick: deleteHandler,\n            children: \" Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning\",\n            type: \"button\",\n            onClick: cancelHandler,\n            children: \" Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, _this);\n});\nexport default BankEdit;","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/components/Banks/BankEdit/BankEdit.tsx"],"names":["React","useState","useEffect","useCallback","useMemo","memo","Redirect","useLocation","useDispatch","useSelector","getUpdatedForm","getFormElements","ValidateForm","FormElement","ConfirmDelete","Modal","SuccessfulOperationEnum","FailedOperationEnum","ElementTypeEnum","ModalTypeEnum","ElementConfigTypeEnum","actions","authActions","initialFormState","name","elementType","Input","elementConfig","type","Text","placeholder","value","validation","required","valid","grade","Select","options","text","BankEdit","id","state","bank","selectedBank","loggedIn","auth","token","loading","common","isLoading","successfulOperation","failedOperation","dispatch","location","formControls","setFormControls","isFormValid","setIsFormValid","redirect","setRedirect","isDeleteConfirmShown","setIsDeleteConfirmShown","isInitializing","setIsInitializing","FetchBank","setAuthRedirectPath","pathname","fetchBank","updatedForm","toString","Update","cancelHandler","Delete","elementHandler","event","saveHandler","preventDefault","parseInt","undefined","saveBank","deleteConfirmContent","Component","confirmDeleteHandler","deleteHandler","isConfirmed","deleteBank","formElements","map","formElement"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { useState, useEffect, useCallback, useMemo, memo, FC, ReactElement } from 'react';\r\nimport { Redirect, useLocation } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { getUpdatedForm, getFormElements, ValidateForm } from '../../../shared/utility';\r\nimport FormElement from '../../UI/FormElement/FormElement';\r\nimport ConfirmDelete from '../../UI/ConfirmDelete/ConfirmDelete';\r\nimport Modal from '../../UI/Modal/Modal';\r\nimport { SuccessfulOperationEnum, FailedOperationEnum, ElementTypeEnum, ModalTypeEnum, ElementConfigTypeEnum } from '../../../shared/enums';\r\nimport * as actions from '../../../store/actions/bankActions';\r\nimport * as authActions from '../../../store/actions/authActions';\r\n//import * as locationActions from '../../../store/actions/locationActions';\r\nimport { Dictionary, FormControlElement, FormControlElementContent } from '../../../shared/types';\r\nimport { AppState } from '../../../store';\r\nimport { Bank } from '../../../models/Bank.model';\r\nimport { FormEvent } from 'react';\r\n\r\ninterface StoreProps {\r\n    bank: Bank,\r\n    loggedIn: boolean\r\n    token: string,\r\n    loading: boolean,\r\n    successfulOperation: SuccessfulOperationEnum,\r\n    failedOperation: FailedOperationEnum\r\n};\r\n\r\nconst initialFormState: Dictionary<FormControlElementContent> = {\r\n    name: {\r\n        elementType: ElementTypeEnum.Input,\r\n        elementConfig: {\r\n            type: ElementConfigTypeEnum.Text,\r\n            placeholder: 'Name',\r\n        },\r\n        value: '',\r\n        validation: {\r\n            required: true\r\n        },\r\n        valid: false\r\n    },\r\n    //grade: {\r\n    //    elementType: ElementTypeEnum.Input,\r\n    //    elementConfig: {\r\n    //        type: ElementConfigTypeEnum.Number,\r\n    //        placeholder: 'Grade',\r\n    //    },\r\n    //    value: '',\r\n    //    validation: {\r\n    //        required: true\r\n    //    },\r\n    //    valid: false\r\n    //}\r\n    grade: {\r\n        elementType: ElementTypeEnum.Select,\r\n        elementConfig: {\r\n            placeholder: 'Grade',\r\n            options: [\r\n                { value: '', text: '---' },\r\n                { value: '1', text: 'A' },\r\n                { value: '2', text: 'B' },\r\n                { value: '3', text: 'C' },\r\n                { value: '4', text: 'D' },\r\n                { value: '5', text: 'E' }\r\n            ],\r\n        },\r\n        value: '',\r\n        validation: {\r\n        },\r\n        valid: true\r\n    }\r\n};\r\n\r\nconst BankEdit: FC<{ id: number }> = memo(({ id }) => {\r\n\r\n    const { bank, loggedIn, token, loading, successfulOperation, failedOperation }: StoreProps = useSelector((state: AppState) => ({\r\n        bank: state.bank.selectedBank,\r\n        loggedIn: state.auth.loggedIn,\r\n        token: state.auth.token,\r\n        loading: state.common.isLoading,\r\n        successfulOperation: state.common.successfulOperation,\r\n        failedOperation: state.common.failedOperation\r\n    }));\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const [formControls, setFormControls] = useState(initialFormState);\r\n    const [isFormValid, setIsFormValid] = useState(false);\r\n    const [redirect, setRedirect] = useState<ReactElement>();\r\n    const [isDeleteConfirmShown, setIsDeleteConfirmShown] = useState(false);\r\n    const [isInitializing, setIsInitializing] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (failedOperation && failedOperation === FailedOperationEnum.FetchBank) {\r\n            setRedirect(<Redirect to={'/banks'} />);\r\n        }\r\n    }, [failedOperation]);\r\n\r\n    useEffect(() => {\r\n        if (!loggedIn) {\r\n            dispatch(authActions.setAuthRedirectPath(location.pathname));\r\n            setRedirect(<Redirect to=\"/auth/\" />);\r\n        }\r\n    }, [loggedIn]);\r\n\r\n    useEffect(() => {\r\n        if (!bank) {\r\n            dispatch(actions.fetchBank(id));\r\n        }\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        let updatedForm = {\r\n            ...formControls\r\n        };\r\n        if (bank && updatedForm && isInitializing) {\r\n            updatedForm = {\r\n                ...updatedForm,\r\n                ['name']: {\r\n                    ...updatedForm['name'],\r\n                    value: bank.name,\r\n                    valid: true\r\n                },\r\n                ['grade']: {\r\n                    ...updatedForm['grade'],\r\n                    value: bank.grade?.toString() ?? '',\r\n                    valid: true\r\n                },\r\n            };\r\n            setIsInitializing(false);\r\n        }\r\n        setFormControls(updatedForm);\r\n    }, [bank]);\r\n\r\n    useEffect(() => {\r\n        setIsFormValid(ValidateForm(formControls));\r\n    }, [formControls]);\r\n\r\n    useEffect(() => {\r\n        switch (successfulOperation) {\r\n            case SuccessfulOperationEnum.Update:\r\n                cancelHandler();\r\n                break;\r\n            case SuccessfulOperationEnum.Delete:\r\n                setRedirect(<Redirect to=\"/banks/\" />);\r\n                break;\r\n        }\r\n    }, [successfulOperation]);\r\n\r\n    const elementHandler = (event: FormEvent, id: string): void => {\r\n        setFormControls(getUpdatedForm(event, formControls, id));\r\n    };\r\n\r\n    const cancelHandler = useCallback((): void => {\r\n        setRedirect(<Redirect to={`/banks/${id}`} />);\r\n    }, [id, setRedirect]);\r\n\r\n    const saveHandler = (event: FormEvent<HTMLFormElement>): void => {\r\n        event.preventDefault();\r\n        const bank: Bank = {\r\n            id: id,\r\n            name: formControls.name.value.toString(),\r\n            grade: (formControls.grade.value ? parseInt(formControls.grade.value.toString()) : undefined)\r\n        };\r\n        dispatch(actions.saveBank(bank, token));\r\n    };\r\n\r\n    const deleteConfirmContent = useMemo((): ReactElement => {\r\n        return (\r\n            <Modal isShown={isDeleteConfirmShown} type={ModalTypeEnum.Component}>\r\n                <ConfirmDelete onOK={() => confirmDeleteHandler(true)}\r\n                    onCancel={() => confirmDeleteHandler(false)} />\r\n            </Modal>\r\n        );\r\n    }, [isDeleteConfirmShown]);\r\n\r\n    const deleteHandler = useCallback((): void => {\r\n        setIsDeleteConfirmShown(true);\r\n    }, [setIsDeleteConfirmShown]);\r\n\r\n    const confirmDeleteHandler = useCallback((isConfirmed): void => {\r\n        if (isConfirmed) {\r\n            dispatch(actions.deleteBank(id, token));\r\n        }\r\n        setIsDeleteConfirmShown(false);\r\n    }, [id, token, setIsDeleteConfirmShown]);\r\n\r\n    const formElements: ReactElement[] = getFormElements(formControls).map((formElement: FormControlElement) => (\r\n        <FormElement formElement={formElement}\r\n            key={formElement.id}\r\n            onChange={(event) => elementHandler(event, formElement.id)}\r\n            onLostFocus={(event) => elementHandler(event, formElement.id)}\r\n        />));\r\n\r\n    return (\r\n        <div>\r\n            {redirect}\r\n            {deleteConfirmContent}\r\n\r\n            <form onSubmit={saveHandler}>\r\n                {formElements}\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <button className=\"btn btn-primary\" type=\"reset\" >Clear</button>\r\n                        <button className=\"btn btn-success\" type=\"submit\" disabled={!isFormValid || loading}>Save</button>\r\n                        <button className=\"btn btn-danger\" type=\"button\" onClick={deleteHandler}> Delete</button >\r\n                        <button className=\"btn btn-warning\" type=\"button\" onClick={cancelHandler}> Cancel</button >\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default BankEdit;"]},"metadata":{},"sourceType":"module"}