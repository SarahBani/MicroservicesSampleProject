{"ast":null,"code":"import _slicedToArray from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nexport default (function (axios) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var reqInterceptor = axios.interceptors.request.use(function (req) {\n    setError(null);\n    return req;\n  });\n  var resInterceptor = axios.interceptors.response.use(function (res) {\n    return res;\n  }, function (err) {\n    setError(err);\n  });\n  useEffect(function () {\n    return function () {\n      axios.interceptors.request.eject(reqInterceptor);\n      axios.interceptors.response.eject(resInterceptor);\n    };\n  }, [reqInterceptor, resInterceptor]);\n\n  var clearError = function clearError() {\n    setError(null);\n  };\n\n  return [error, clearError];\n}); //interface ErrorHandlerType {\n//    interceptors: {\n//        request: {\n//            use: (arg0: (req: any) => any) => any;\n//            eject: (arg0: any) => void\n//        },\n//        response: {\n//            use: (arg0: (res: any) => any, arg1: (err: any) => void) => any;\n//            eject: (arg0: any) => void\n//        }\n//    }\n//}\n//export default (httpErrorHandler: ErrorHandlerType): [string | null, (() => void)] => {\n//    const [error, setError] = useState<string | null>(null);\n//    const reqInterceptor = httpErrorHandler.interceptors.request.use(\n//        req => {\n//            setError(null);\n//            return req;\n//        });\n//    const resInterceptor = httpErrorHandler.interceptors.response.use(\n//        res => res,\n//        err => {\n//            setError(err);\n//        }\n//    );\n//    useEffect(() => {\n//        return () => {\n//            httpErrorHandler.interceptors.request.eject(reqInterceptor);\n//            httpErrorHandler.interceptors.response.eject(resInterceptor);\n//        }\n//    }, [reqInterceptor, resInterceptor]);\n//    const clearError = (): void => {\n//        setError(null);\n//    }\n//    return [error, clearError];\n//};\n//const httpErrorHandler = (axios: AxiosInstance): [string | null, () => void] => {\n//    //export default (httpErrorHandler: ErrorHandlerType)    => {\n//    //export default (httpErrorHandler: [string | null, (() => void)])=> {\n//    const [error, setError] = useState<string | null>(null);\n//    const reqInterceptor = axios.interceptors.request.use(\n//        req => {\n//            setError(null);\n//            return req;\n//        });\n//    const resInterceptor = axios.interceptors.response.use(\n//        res => res,\n//        err => {\n//            setError(err);\n//        }\n//    );\n//    useEffect(() => {\n//        return () => {\n//            axios.interceptors.request.eject(reqInterceptor);\n//            axios.interceptors.response.eject(resInterceptor);\n//        }\n//    }, [reqInterceptor, resInterceptor]);\n//    const clearError = (): void => {\n//        setError(null);\n//    }\n//    //return [error, clearError] as [string, () => void]; // as const;\n//    return [error, clearError];\n//};\n//export default httpErrorHandler;","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/hooks/http-error-handler.ts"],"names":["useEffect","useState","axios","error","setError","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","err","eject","clearError"],"mappings":";AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,gBAAe,UAACC,KAAD,EAAyD;AAEpE,kBAA0BD,QAAQ,CAAgB,IAAhB,CAAlC;AAAA;AAAA,MAAOE,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,cAAc,GAAGH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACnB,UAAAC,GAAG,EAAI;AACHL,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,WAAOK,GAAP;AACH,GAJkB,CAAvB;AAMA,MAAMC,cAAc,GAAGR,KAAK,CAACI,YAAN,CAAmBK,QAAnB,CAA4BH,GAA5B,CACnB,UAAAI,GAAG;AAAA,WAAIA,GAAJ;AAAA,GADgB,EAEnB,UAAAC,GAAG,EAAI;AACHT,IAAAA,QAAQ,CAACS,GAAD,CAAR;AACH,GAJkB,CAAvB;AAOAb,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAO,YAAM;AACTE,MAAAA,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2BO,KAA3B,CAAiCT,cAAjC;AACAH,MAAAA,KAAK,CAACI,YAAN,CAAmBK,QAAnB,CAA4BG,KAA5B,CAAkCJ,cAAlC;AACH,KAHD;AAIH,GALQ,EAKN,CAACL,cAAD,EAAiBK,cAAjB,CALM,CAAT;;AAOA,MAAMK,UAAU,GAAG,SAAbA,UAAa,GAAY;AAC3BX,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIA,SAAO,CAACD,KAAD,EAAQY,UAAR,CAAP;AACH,CA7BD,E,CAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import { AxiosInstance } from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default (axios: AxiosInstance): [string | null, (() => void)] => {\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const reqInterceptor = axios.interceptors.request.use(\r\n        req => {\r\n            setError(null);\r\n            return req;\r\n        });\r\n\r\n    const resInterceptor = axios.interceptors.response.use(\r\n        res => res,\r\n        err => {\r\n            setError(err);\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            axios.interceptors.request.eject(reqInterceptor);\r\n            axios.interceptors.response.eject(resInterceptor);\r\n        }\r\n    }, [reqInterceptor, resInterceptor]);\r\n\r\n    const clearError = (): void => {\r\n        setError(null);\r\n    }\r\n\r\n    return [error, clearError];\r\n};\r\n\r\n\r\n//interface ErrorHandlerType {\r\n//    interceptors: {\r\n//        request: {\r\n//            use: (arg0: (req: any) => any) => any;\r\n//            eject: (arg0: any) => void\r\n//        },\r\n//        response: {\r\n//            use: (arg0: (res: any) => any, arg1: (err: any) => void) => any;\r\n//            eject: (arg0: any) => void\r\n//        }\r\n//    }\r\n//}\r\n\r\n//export default (httpErrorHandler: ErrorHandlerType): [string | null, (() => void)] => {\r\n\r\n//    const [error, setError] = useState<string | null>(null);\r\n\r\n//    const reqInterceptor = httpErrorHandler.interceptors.request.use(\r\n//        req => {\r\n//            setError(null);\r\n//            return req;\r\n//        });\r\n\r\n//    const resInterceptor = httpErrorHandler.interceptors.response.use(\r\n//        res => res,\r\n//        err => {\r\n//            setError(err);\r\n//        }\r\n//    );\r\n\r\n//    useEffect(() => {\r\n//        return () => {\r\n//            httpErrorHandler.interceptors.request.eject(reqInterceptor);\r\n//            httpErrorHandler.interceptors.response.eject(resInterceptor);\r\n//        }\r\n//    }, [reqInterceptor, resInterceptor]);\r\n\r\n//    const clearError = (): void => {\r\n//        setError(null);\r\n//    }\r\n\r\n//    return [error, clearError];\r\n//};\r\n\r\n//const httpErrorHandler = (axios: AxiosInstance): [string | null, () => void] => {\r\n//    //export default (httpErrorHandler: ErrorHandlerType)    => {\r\n//    //export default (httpErrorHandler: [string | null, (() => void)])=> {\r\n\r\n//    const [error, setError] = useState<string | null>(null);\r\n\r\n//    const reqInterceptor = axios.interceptors.request.use(\r\n//        req => {\r\n//            setError(null);\r\n//            return req;\r\n//        });\r\n\r\n//    const resInterceptor = axios.interceptors.response.use(\r\n//        res => res,\r\n//        err => {\r\n//            setError(err);\r\n//        }\r\n//    );\r\n\r\n//    useEffect(() => {\r\n//        return () => {\r\n//            axios.interceptors.request.eject(reqInterceptor);\r\n//            axios.interceptors.response.eject(resInterceptor);\r\n//        }\r\n//    }, [reqInterceptor, resInterceptor]);\r\n\r\n//    const clearError = (): void => {\r\n//        setError(null);\r\n//    }\r\n\r\n//    //return [error, clearError] as [string, () => void]; // as const;\r\n//    return [error, clearError];\r\n//};\r\n\r\n//export default httpErrorHandler;"]},"metadata":{},"sourceType":"module"}