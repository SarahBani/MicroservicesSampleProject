{"ast":null,"code":"import _slicedToArray from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"H:\\\\Project\\\\Microservices\\\\MicroservicesSampleProject\\\\Client\\\\Client.SPA\\\\ClientApp\\\\src\\\\components\\\\Banks\\\\BankNew\\\\BankNew.tsx\",\n    _this = this;\n\nimport * as React from 'react';\nimport { useState, useEffect, useCallback, memo } from 'react';\nimport { Redirect, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUpdatedForm, getFormElements, ValidateForm } from '../../../shared/utility';\nimport FormElement from '../../UI/FormElement/FormElement';\nimport { ElementConfigTypeEnum, ElementTypeEnum, SuccessfulOperationEnum } from '../../../shared/enums';\nimport * as actions from '../../../store/actions/bankActions'; //import * as locationActions from '../../../store/actions/locationActions';\n\nimport * as authActions from '../../../store/actions/authActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nvar initialFormState = {\n  name: {\n    elementType: ElementTypeEnum.Input,\n    elementConfig: {\n      type: ElementConfigTypeEnum.Text,\n      placeholder: 'Name'\n    },\n    value: '',\n    validation: {\n      required: true\n    },\n    valid: false\n  },\n  //grade: {\n  //    elementType: ElementTypeEnum.Input,\n  //    elementConfig: {\n  //        type: ElementConfigTypeEnum.Number,\n  //        placeholder: 'Grade',\n  //        maxLength: 1\n  //    },\n  //    value: '',\n  //    validation: {\n  //        maxLength: 1,\n  //        max: 5\n  //    },\n  //    valid: true\n  //}\n  grade: {\n    elementType: ElementTypeEnum.Select,\n    elementConfig: {\n      placeholder: 'Grade',\n      options: [{\n        value: '',\n        text: '---'\n      }, {\n        value: '1',\n        text: 'A'\n      }, {\n        value: '2',\n        text: 'B'\n      }, {\n        value: '3',\n        text: 'C'\n      }, {\n        value: '4',\n        text: 'D'\n      }, {\n        value: '5',\n        text: 'E'\n      }]\n    },\n    value: '',\n    validation: {},\n    valid: true\n  }\n};\nvar BankNew = /*#__PURE__*/memo(function () {\n  var _useSelector = useSelector(function (state) {\n    return {\n      loggedIn: state.auth.loggedIn,\n      token: state.auth.token,\n      uploadedPercentage: state.upload.fileUploadPercentage,\n      loading: state.common.isLoading,\n      successfulOperation: state.common.successfulOperation\n    };\n  }),\n      loggedIn = _useSelector.loggedIn,\n      token = _useSelector.token,\n      uploadedPercentage = _useSelector.uploadedPercentage,\n      loading = _useSelector.loading,\n      successfulOperation = _useSelector.successfulOperation;\n\n  var dispatch = useDispatch();\n  var location = useLocation();\n\n  var _useState = useState(initialFormState),\n      _useState2 = _slicedToArray(_useState, 2),\n      formControls = _useState2[0],\n      setFormControls = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFormValid = _useState4[0],\n      setIsFormValid = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      redirect = _useState6[0],\n      setRedirect = _useState6[1];\n\n  useEffect(function () {\n    if (!loggedIn) {\n      dispatch(authActions.setAuthRedirectPath(location.pathname));\n      setRedirect( /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/auth/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }, _this));\n    }\n  }, [loggedIn]);\n  useEffect(function () {\n    setIsFormValid(ValidateForm(formControls));\n  }, [formControls]);\n  useEffect(function () {\n    if (successfulOperation === SuccessfulOperationEnum.Insert) {\n      cancelHandler();\n    }\n  }, [successfulOperation]);\n\n  var elementHandler = function elementHandler(event, id) {\n    setFormControls(getUpdatedForm(event, formControls, id));\n  };\n\n  var uploadImageHandler = useCallback(function (event) {\n    var files = event.target.files;\n\n    if (files.length == 0) {\n      return;\n    }\n\n    dispatch(actions.uploadBankLogo(files[0], token));\n  }, []);\n  var cancelHandler = useCallback(function () {\n    setRedirect( /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/banks/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }, _this));\n  }, [setRedirect]);\n\n  var saveHandler = function saveHandler(event) {\n    event.preventDefault();\n    var bank = {\n      id: 0,\n      name: formControls.name.value.toString(),\n      grade: formControls.grade.value ? parseInt(formControls.grade.value.toString()) : undefined\n    };\n    dispatch(actions.saveBank(bank, token));\n  };\n\n  var formElements = getFormElements(formControls).map(function (formElement) {\n    return /*#__PURE__*/_jsxDEV(FormElement, {\n      formElement: formElement,\n      onChange: function onChange(event) {\n        return elementHandler(event, formElement.id);\n      },\n      onLostFocus: function onLostFocus(event) {\n        return elementHandler(event, formElement.id);\n      }\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [redirect, /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: saveHandler,\n      children: [formElements, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 \",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"customFile\",\n            className: \"form-control-file border\",\n            accept: \"image/*\",\n            onChange: uploadImageHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"reset\",\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            type: \"submit\",\n            disabled: !isFormValid || loading,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning\",\n            type: \"button\",\n            onClick: cancelHandler,\n            children: \" Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, _this);\n});\nexport default BankNew;","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/components/Banks/BankNew/BankNew.tsx"],"names":["React","useState","useEffect","useCallback","memo","Redirect","useLocation","useDispatch","useSelector","getUpdatedForm","getFormElements","ValidateForm","FormElement","ElementConfigTypeEnum","ElementTypeEnum","SuccessfulOperationEnum","actions","authActions","initialFormState","name","elementType","Input","elementConfig","type","Text","placeholder","value","validation","required","valid","grade","Select","options","text","BankNew","state","loggedIn","auth","token","uploadedPercentage","upload","fileUploadPercentage","loading","common","isLoading","successfulOperation","dispatch","location","formControls","setFormControls","isFormValid","setIsFormValid","redirect","setRedirect","setAuthRedirectPath","pathname","Insert","cancelHandler","elementHandler","event","id","uploadImageHandler","files","target","length","uploadBankLogo","saveHandler","preventDefault","bank","toString","parseInt","undefined","saveBank","formElements","map","formElement"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { useState, useEffect, useCallback, memo, ReactElement, FormEvent } from 'react';\r\nimport { Redirect, useLocation } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { getUpdatedForm, getFormElements, ValidateForm } from '../../../shared/utility';\r\nimport FormElement from '../../UI/FormElement/FormElement';\r\nimport { ElementConfigTypeEnum, ElementTypeEnum, SuccessfulOperationEnum } from '../../../shared/enums';\r\nimport * as actions from '../../../store/actions/bankActions';\r\n//import * as locationActions from '../../../store/actions/locationActions';\r\nimport * as authActions from '../../../store/actions/authActions';\r\nimport * as uploadActions from '../../../store/actions/uploadActions';\r\nimport { AppState } from '../../../store';\r\nimport { Bank } from '../../../models/Bank.model';\r\nimport { Dictionary, FormControlElement, FormControlElementContent } from '../../../shared/types';\r\n\r\ninterface StoreProps {\r\n    loggedIn: boolean\r\n    token: string,\r\n    uploadedPercentage: number,\r\n    loading: boolean,\r\n    successfulOperation: SuccessfulOperationEnum,\r\n};\r\n\r\nconst initialFormState: Dictionary<FormControlElementContent> = {\r\n    name: {\r\n        elementType: ElementTypeEnum.Input,\r\n        elementConfig: {\r\n            type: ElementConfigTypeEnum.Text,\r\n            placeholder: 'Name',\r\n        },\r\n        value: '',\r\n        validation: {\r\n            required: true\r\n        },\r\n        valid: false\r\n    },\r\n    //grade: {\r\n    //    elementType: ElementTypeEnum.Input,\r\n    //    elementConfig: {\r\n    //        type: ElementConfigTypeEnum.Number,\r\n    //        placeholder: 'Grade',\r\n    //        maxLength: 1\r\n    //    },\r\n    //    value: '',\r\n    //    validation: {\r\n    //        maxLength: 1,\r\n    //        max: 5\r\n    //    },\r\n    //    valid: true\r\n    //}\r\n    grade: {\r\n        elementType: ElementTypeEnum.Select,\r\n        elementConfig: {\r\n            placeholder: 'Grade',\r\n            options: [\r\n                { value: '', text: '---' },\r\n                { value: '1', text: 'A' },\r\n                { value: '2', text: 'B' },\r\n                { value: '3', text: 'C' },\r\n                { value: '4', text: 'D' },\r\n                { value: '5', text: 'E' }\r\n            ],\r\n        },\r\n        value: '',\r\n        validation: {\r\n        },\r\n        valid: true\r\n    }\r\n};\r\n\r\nconst BankNew = memo(() => {\r\n\r\n    const { loggedIn, token, uploadedPercentage, loading, successfulOperation }: StoreProps = useSelector((state: AppState) => ({\r\n        loggedIn: state.auth.loggedIn,\r\n        token: state.auth.token,\r\n        uploadedPercentage: state.upload.fileUploadPercentage,\r\n        loading: state.common.isLoading,\r\n        successfulOperation: state.common.successfulOperation\r\n    }));\r\n    const dispatch = useDispatch();\r\n\r\n    const location = useLocation();\r\n    const [formControls, setFormControls] = useState(initialFormState);\r\n    const [isFormValid, setIsFormValid] = useState<boolean>(false);\r\n    const [redirect, setRedirect] = useState<ReactElement>();\r\n\r\n    useEffect(() => {\r\n        if (!loggedIn) {\r\n            dispatch(authActions.setAuthRedirectPath(location.pathname));\r\n            setRedirect(<Redirect to=\"/auth/\" />);\r\n        }\r\n    }, [loggedIn]);\r\n\r\n    useEffect(() => {\r\n        setIsFormValid(ValidateForm(formControls));\r\n    }, [formControls]);\r\n\r\n    useEffect(() => {\r\n        if (successfulOperation === SuccessfulOperationEnum.Insert) {\r\n            cancelHandler();\r\n        }\r\n    }, [successfulOperation]);\r\n\r\n    const elementHandler = (event: FormEvent, id: string) => {\r\n        setFormControls(getUpdatedForm(event, formControls, id));\r\n    };\r\n\r\n    const uploadImageHandler = useCallback((event) => {\r\n        const files = event.target.files;\r\n        if (files.length == 0) {\r\n            return;\r\n        }\r\n        dispatch(actions.uploadBankLogo(files[0], token))\r\n    }, []);\r\n\r\n    const cancelHandler = useCallback(() => {\r\n        setRedirect(<Redirect to=\"/banks/\" />);\r\n    }, [setRedirect]);\r\n\r\n    const saveHandler = (event: FormEvent<HTMLFormElement>): void => {\r\n        event.preventDefault();\r\n        const bank: Bank = {\r\n            id: 0,\r\n            name: formControls.name.value.toString(),\r\n            grade: (formControls.grade.value ? parseInt(formControls.grade.value.toString()) : undefined)\r\n        };\r\n        dispatch(actions.saveBank(bank, token));\r\n    };\r\n\r\n    const formElements = getFormElements(formControls).map((formElement: FormControlElement) => (\r\n        <FormElement formElement={formElement}\r\n            key={formElement.id}\r\n            onChange={(event) => elementHandler(event, formElement.id)}\r\n            onLostFocus={(event) => elementHandler(event, formElement.id)}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <div>\r\n            {redirect}\r\n            <form onSubmit={saveHandler}>\r\n                {formElements}\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 \">\r\n                        <input type=\"file\" id=\"customFile\" className=\"form-control-file border\"\r\n                            accept=\"image/*\" onChange={uploadImageHandler} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center\">\r\n                        <button className=\"btn btn-primary\" type=\"reset\">Clear</button>\r\n                        <button className=\"btn btn-success\" type=\"submit\"\r\n                            disabled={!isFormValid || loading}>Save</button>\r\n                        <button className=\"btn btn-warning\" type=\"button\" onClick={cancelHandler}> Cancel</button >\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default BankNew;"]},"metadata":{},"sourceType":"module"}