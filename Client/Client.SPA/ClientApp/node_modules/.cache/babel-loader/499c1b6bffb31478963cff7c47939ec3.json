{"ast":null,"code":"var _jsxFileName = \"H:\\\\Project\\\\Microservices\\\\MicroservicesSampleProject\\\\Client\\\\Client.SPA\\\\ClientApp\\\\src\\\\components\\\\UI\\\\FormElement\\\\FormElement.tsx\",\n    _this = this;\n\nimport * as React from 'react';\nimport FormControl from './FormControl/FormControl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nvar FormElement = function FormElement(_ref) {\n  var formElement = _ref.formElement,\n      _onChange = _ref.onChange,\n      _onSelect = _ref.onSelect,\n      _onLostFocus = _ref.onLostFocus;\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    type: formElement.content.elementType,\n    elementConfig: formElement.content.elementConfig,\n    value: formElement.content.value,\n    options: formElement.content.options,\n    disabled: formElement.content.disabled,\n    autoComplete: formElement.content.autoComplete,\n    touched: formElement.content.touched,\n    valid: formElement.content.valid //onChange={(event: SyntheticEvent<EventTarget>) => onChange(event, formElement.id)}\n    ,\n    onChange: function onChange(event) {\n      return _onChange === null || _onChange === void 0 ? void 0 : _onChange(event, formElement.id);\n    },\n    onSelect: function onSelect(id) {\n      return _onSelect === null || _onSelect === void 0 ? void 0 : _onSelect(id);\n    } //onLostFocus={(event: SyntheticEvent<EventTarget>) => onLostFocus(event, formElement.id)}\n    ,\n    onLostFocus: function onLostFocus(event) {\n      return _onLostFocus === null || _onLostFocus === void 0 ? void 0 : _onLostFocus(event, formElement.id);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, _this);\n};\n\nexport default FormElement;","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/components/UI/FormElement/FormElement.tsx"],"names":["React","FormControl","FormElement","formElement","onChange","onSelect","onLostFocus","content","elementType","elementConfig","value","options","disabled","autoComplete","touched","valid","event","id"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,WAAP,MAAwB,2BAAxB;;AASC;;AAED,IAAMC,WAAsB,GAAG,SAAzBA,WAAyB;AAAA,MAAGC,WAAH,QAAGA,WAAH;AAAA,MAAgBC,SAAhB,QAAgBA,QAAhB;AAAA,MAA0BC,SAA1B,QAA0BA,QAA1B;AAAA,MAAoCC,YAApC,QAAoCA,WAApC;AAAA,sBAC3B,QAAC,WAAD;AACI,IAAA,IAAI,EAAEH,WAAW,CAACI,OAAZ,CAAoBC,WAD9B;AAEI,IAAA,aAAa,EAAEL,WAAW,CAACI,OAAZ,CAAoBE,aAFvC;AAGI,IAAA,KAAK,EAAEN,WAAW,CAACI,OAAZ,CAAoBG,KAH/B;AAII,IAAA,OAAO,EAAEP,WAAW,CAACI,OAAZ,CAAoBI,OAJjC;AAKI,IAAA,QAAQ,EAAER,WAAW,CAACI,OAAZ,CAAoBK,QALlC;AAMI,IAAA,YAAY,EAAET,WAAW,CAACI,OAAZ,CAAoBM,YANtC;AAOI,IAAA,OAAO,EAAEV,WAAW,CAACI,OAAZ,CAAoBO,OAPjC;AAQI,IAAA,KAAK,EAAEX,WAAW,CAACI,OAAZ,CAAoBQ,KAR/B,CASI;AATJ;AAUI,IAAA,QAAQ,EAAE,kBAACC,KAAD;AAAA,aAAwBZ,SAAxB,aAAwBA,SAAxB,uBAAwBA,SAAQ,CAAGY,KAAH,EAAUb,WAAW,CAACc,EAAtB,CAAhC;AAAA,KAVd;AAWI,IAAA,QAAQ,EAAE,kBAACA,EAAD;AAAA,aAAgBZ,SAAhB,aAAgBA,SAAhB,uBAAgBA,SAAQ,CAAGY,EAAH,CAAxB;AAAA,KAXd,CAYI;AAZJ;AAaI,IAAA,WAAW,EAAE,qBAACD,KAAD;AAAA,aAAgCV,YAAhC,aAAgCA,YAAhC,uBAAgCA,YAAW,CAAGU,KAAH,EAAUb,WAAW,CAACc,EAAtB,CAA3C;AAAA;AAbjB;AAAA;AAAA;AAAA;AAAA,WAD2B;AAAA,CAA/B;;AAkBA,eAAef,WAAf","sourcesContent":["import * as React from 'react';\r\nimport { ChangeEvent, FC, FocusEvent } from 'react';\r\n\r\nimport FormControl from './FormControl/FormControl';\r\nimport { FormControlElement } from '../../../shared/types';\r\n\r\ninterface Props {\r\n    formElement: FormControlElement,\r\n    onChange?: (event: ChangeEvent, id: string) => void,\r\n    onSelect?: (id: string) => void,\r\n    //onLostFocus?: (event: SyntheticEvent<EventTarget>, id: number) => void//FocusEventHandler<Element>,\r\n    onLostFocus?: (event: FocusEvent<Element>, id: string) => void\r\n};\r\n\r\nconst FormElement: FC<Props> = ({ formElement, onChange, onSelect, onLostFocus }) => (\r\n    <FormControl\r\n        type={formElement.content.elementType}\r\n        elementConfig={formElement.content.elementConfig}\r\n        value={formElement.content.value}\r\n        options={formElement.content.options}\r\n        disabled={formElement.content.disabled}\r\n        autoComplete={formElement.content.autoComplete}\r\n        touched={formElement.content.touched}\r\n        valid={formElement.content.valid}\r\n        //onChange={(event: SyntheticEvent<EventTarget>) => onChange(event, formElement.id)}\r\n        onChange={(event: ChangeEvent) => onChange?.(event, formElement.id)}\r\n        onSelect={(id: string) => onSelect?.(id)}\r\n        //onLostFocus={(event: SyntheticEvent<EventTarget>) => onLostFocus(event, formElement.id)}\r\n        onLostFocus={(event: FocusEvent<Element>) => onLostFocus?.(event, formElement.id)}\r\n    />\r\n);\r\n\r\nexport default FormElement;"]},"metadata":{},"sourceType":"module"}