{"ast":null,"code":"import _slicedToArray from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"H:\\\\Project\\\\Microservices\\\\MicroservicesSampleProject\\\\Client\\\\Client.SPA\\\\ClientApp\\\\src\\\\components\\\\Auth\\\\Auth.tsx\",\n    _this = this;\n\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useHistory } from \"react-router\";\nimport * as classes from './Auth.module.scss';\nimport FormElement from '../UI/FormElement/FormElement';\nimport Button from '../UI/Button/Button';\nimport { getFormElements, getUpdatedForm, disableForm, ValidateForm } from '../../shared/utility';\nimport * as actions from '../../store/actions/authActions';\nimport { ButtonTypeEnum, ElementConfigTypeEnum, ElementTypeEnum } from \"../../shared/enums\";\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar initialFormState = {\n  email: {\n    elementType: ElementTypeEnum.Input,\n    elementConfig: {\n      type: ElementConfigTypeEnum.Email,\n      placeholder: 'Email'\n    },\n    value: 'sarah@yahoo.com',\n    validation: {\n      required: true,\n      email: true\n    },\n    valid: true\n  },\n  password: {\n    elementType: ElementTypeEnum.Input,\n    elementConfig: {\n      type: ElementConfigTypeEnum.Password,\n      placeholder: 'Password'\n    },\n    value: '',\n    autoComplete: true,\n    validation: {\n      required: true,\n      minLength: 6\n    },\n    valid: true\n  }\n};\nexport var Auth = function Auth() {\n  var _useSelector = useSelector(function (state) {\n    return {\n      isLoggedIn: state.auth.loggedIn,\n      isLoading: state.common.isLoading,\n      authRedirectPath: state.auth.authRedirectPath\n    };\n  }),\n      isLoggedIn = _useSelector.isLoggedIn,\n      isLoading = _useSelector.isLoading,\n      authRedirectPath = _useSelector.authRedirectPath;\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n\n  var _useState = useState(initialFormState),\n      _useState2 = _slicedToArray(_useState, 2),\n      formControls = _useState2[0],\n      setFormControls = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFormValid = _useState4[0],\n      setIsFormValid = _useState4[1];\n\n  useEffect(function () {\n    if (history.action !== 'REPLACE') {\n      dispatch(actions.setAuthRedirectPath('/'));\n    }\n  }, []);\n  useEffect(function () {\n    var updatedForm = disableForm(formControls, isLoading);\n    setFormControls(updatedForm);\n  }, [isLoading, setFormControls]);\n\n  var elementChangedHandler = function elementChangedHandler(event, id) {\n    var updatedForm = getUpdatedForm(event, formControls, id);\n    setFormControls(updatedForm);\n    setIsFormValid(ValidateForm(updatedForm));\n  };\n\n  var elementLostFocusHandler = function elementLostFocusHandler(event, id) {\n    setFormControls(getUpdatedForm(event, formControls, id));\n  };\n\n  var signInHandler = function signInHandler(event) {\n    event.preventDefault();\n    dispatch(actions.signIn(formControls.email.value.toString(), formControls.password.value.toString()));\n  };\n\n  var loggedInRedirect = isLoggedIn && /*#__PURE__*/_jsxDEV(Redirect, {\n    to: authRedirectPath\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 45\n  }, _this);\n\n  var form = /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: signInHandler,\n    children: [getFormElements(formControls).map(function (formElement) {\n      return /*#__PURE__*/_jsxDEV(FormElement, {\n        formElement: formElement,\n        onChange: function onChange(event) {\n          return elementChangedHandler(event, formElement.id);\n        },\n        onLostFocus: function onLostFocus(event) {\n          return elementLostFocusHandler(event, formElement.id);\n        }\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(Button, {\n      type: ButtonTypeEnum.Success,\n      disabled: !isFormValid || isLoading,\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, _this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.Auth,\n    children: [loggedInRedirect, form]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, _this);\n};\nexport default withErrorHandler(Auth);","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/components/Auth/Auth.tsx"],"names":["React","useState","useEffect","useDispatch","useSelector","Redirect","useHistory","classes","FormElement","Button","getFormElements","getUpdatedForm","disableForm","ValidateForm","actions","ButtonTypeEnum","ElementConfigTypeEnum","ElementTypeEnum","withErrorHandler","initialFormState","email","elementType","Input","elementConfig","type","Email","placeholder","value","validation","required","valid","password","Password","autoComplete","minLength","Auth","state","isLoggedIn","auth","loggedIn","isLoading","common","authRedirectPath","dispatch","history","formControls","setFormControls","isFormValid","setIsFormValid","action","setAuthRedirectPath","updatedForm","elementChangedHandler","event","id","elementLostFocusHandler","signInHandler","preventDefault","signIn","toString","loggedInRedirect","form","map","formElement","Success"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { useState, useEffect, FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\n\r\nimport * as classes from './Auth.module.scss';\r\nimport FormElement from '../UI/FormElement/FormElement';\r\nimport Button from '../UI/Button/Button';\r\nimport { getFormElements, getUpdatedForm, disableForm, ValidateForm } from '../../shared/utility';\r\nimport * as actions from '../../store/actions/authActions';\r\nimport { ButtonTypeEnum, ElementConfigTypeEnum, ElementTypeEnum } from \"../../shared/enums\";\r\nimport { AppState } from \"../../store\";\r\nimport { Dictionary, FormControlElement, FormControlElementContent } from \"../../shared/types\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\n\r\ninterface StoreProps {\r\n    isLoggedIn: boolean,\r\n    isLoading: boolean,\r\n    authRedirectPath: string\r\n}\r\n\r\nconst initialFormState: Dictionary<FormControlElementContent> = {\r\n    email: {\r\n        elementType: ElementTypeEnum.Input,\r\n        elementConfig: {\r\n            type: ElementConfigTypeEnum.Email,\r\n            placeholder: 'Email',\r\n        },\r\n        value: 'sarah@yahoo.com',\r\n        validation: {\r\n            required: true,\r\n            email: true\r\n        },\r\n        valid: true\r\n    },\r\n    password: {\r\n        elementType: ElementTypeEnum.Input,\r\n        elementConfig: {\r\n            type: ElementConfigTypeEnum.Password,\r\n            placeholder: 'Password',\r\n        },\r\n        value: '',\r\n        autoComplete: true,\r\n        validation: {\r\n            required: true,\r\n            minLength: 6\r\n        },\r\n        valid: true\r\n    }\r\n};\r\n\r\nexport const Auth: FC = () => {\r\n\r\n    const { isLoggedIn, isLoading, authRedirectPath }: StoreProps = useSelector((state: AppState) => ({\r\n        isLoggedIn: state.auth.loggedIn,\r\n        isLoading: state.common.isLoading,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }));\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [formControls, setFormControls] = useState(initialFormState);\r\n    const [isFormValid, setIsFormValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (history.action !== 'REPLACE') {\r\n            dispatch(actions.setAuthRedirectPath('/'));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const updatedForm = disableForm(formControls, isLoading);\r\n        setFormControls(updatedForm);\r\n    }, [isLoading, setFormControls]);\r\n\r\n    const elementChangedHandler = (event: any, id: string) => {\r\n        const updatedForm = getUpdatedForm(event, formControls, id);\r\n        setFormControls(updatedForm);\r\n        setIsFormValid(ValidateForm(updatedForm));\r\n    };\r\n\r\n    const elementLostFocusHandler = (event: any, id: string) => {\r\n        setFormControls(getUpdatedForm(event, formControls, id));\r\n    };\r\n\r\n    const signInHandler = (event: any) => {\r\n        event.preventDefault();\r\n        dispatch(actions.signIn(formControls.email.value.toString(), formControls.password.value.toString()));\r\n    };\r\n\r\n    const loggedInRedirect = (isLoggedIn && <Redirect to={authRedirectPath} />);\r\n\r\n    const form = (\r\n        <form onSubmit={signInHandler}>\r\n            {\r\n                getFormElements(formControls).map((formElement: FormControlElement) => (\r\n                    <FormElement formElement={formElement}\r\n                        key={formElement.id}\r\n                        onChange={(event: any) => elementChangedHandler(event, formElement.id)}\r\n                        onLostFocus={(event: any) => elementLostFocusHandler(event, formElement.id)}\r\n                    />\r\n                ))\r\n            }\r\n            <Button type={ButtonTypeEnum.Success} disabled={!isFormValid || isLoading}>Sign In</Button>\r\n        </form>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.Auth}>\r\n            {loggedInRedirect}\r\n            {form}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withErrorHandler(Auth);"]},"metadata":{},"sourceType":"module"}