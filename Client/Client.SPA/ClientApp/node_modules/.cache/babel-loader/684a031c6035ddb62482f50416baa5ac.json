{"ast":null,"code":"import _objectSpread from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"H:\\\\Project\\\\Microservices\\\\MicroservicesSampleProject\\\\Client\\\\Client.SPA\\\\ClientApp\\\\src\\\\components\\\\UI\\\\FormElement\\\\FormControl\\\\FormControl.tsx\",\n    _this = this;\n\nimport * as React from 'react';\nimport * as classes from './FormControl.module.scss';\nimport DropDown from '../../DropDown/DropDown';\nimport { ElementTypeEnum } from '../../../../shared/enums';\nimport { ElementConfigTypeEnum } from '../../../../shared/enums';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nvar FormControl = function FormControl(props) {\n  var _props$elementConfig, _props$elementConfig$, _ElementConfigTypeEnu;\n\n  var formElement;\n  var controlClasses = [classes.FormElement];\n  var validationError = null;\n\n  if (!props.valid && props.touched) {\n    controlClasses.push(classes.Invalid);\n    validationError = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.ValidationError,\n      children: [\"Please enter a valid \", props.label ? props.label : 'value', \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, _this);\n  }\n\n  switch (props.type) {\n    case ElementTypeEnum.TextArea:\n      formElement = /*#__PURE__*/_jsxDEV(\"textarea\", _objectSpread(_objectSpread({}, props.elementConfig), {}, {\n        value: props.value,\n        className: controlClasses.join(' '),\n        onChange: props.onChange,\n        onBlur: props.onLostFocus,\n        disabled: props.disabled\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, _this);\n      break;\n\n    case ElementTypeEnum.Select:\n      formElement = /*#__PURE__*/_jsxDEV(\"select\", {\n        name: props.id,\n        className: controlClasses.join(' '),\n        title: props.title,\n        value: props.value.toString(),\n        onChange: props.onChange,\n        onBlur: props.onLostFocus,\n        disabled: props.disabled,\n        children: (_props$elementConfig = props.elementConfig) === null || _props$elementConfig === void 0 ? void 0 : (_props$elementConfig$ = _props$elementConfig.options) === null || _props$elementConfig$ === void 0 ? void 0 : _props$elementConfig$.map(function (option) {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            children: option.text\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, _this);\n      break;\n\n    case ElementTypeEnum.DropDown:\n      formElement = /*#__PURE__*/_jsxDEV(DropDown, _objectSpread(_objectSpread({}, props.elementConfig), {}, {\n        id: props.id,\n        className: controlClasses.join(' '),\n        data: props.options,\n        value: props.value.toString(),\n        title: props.title,\n        disabled: props.disabled,\n        onSelect: props.onSelect,\n        onBlur: props.onLostFocus\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, _this);\n      break;\n\n    case ElementTypeEnum.Input:\n    default:\n      //let patternConfig: { pattern: string } | undefined;\n      //if (props.elementConfig!.type === ElementConfigTypeEnum.Number &&\n      //    props.elementConfig!.maxLength &&\n      //    !props.elementConfig!.pattern) {\n      //    props.elementConfig!.type = ElementConfigTypeEnum.Text;\n      //    patternConfig = { pattern: \"\\\\d\".repeat(props.elementConfig!.maxLength!) };\n      //}\n      var keyPressHandler;\n\n      if (props.elementConfig.type === ElementConfigTypeEnum.Number && props.elementConfig.maxLength) {\n        keyPressHandler = {\n          onKeyPress: numberInputHandler\n        };\n      }\n\n      var inputType = (_ElementConfigTypeEnu = ElementConfigTypeEnum[props.elementConfig.type]) === null || _ElementConfigTypeEnu === void 0 ? void 0 : _ElementConfigTypeEnu.toLowerCase();\n      formElement = /*#__PURE__*/_jsxDEV(\"input\", _objectSpread(_objectSpread({}, props.elementConfig), {}, {\n        type: inputType,\n        name: props.id,\n        value: props.value,\n        className: controlClasses.join(' '),\n        onChange: props.onChange,\n        onBlur: props.onLostFocus,\n        disabled: props.disabled,\n        autoComplete: props.autoComplete ? 'on' : undefined\n      }, keyPressHandler), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.FormControl,\n    children: [props.label && /*#__PURE__*/_jsxDEV(\"label\", {\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 29\n    }, _this), formElement, validationError]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, _this);\n};\n\nvar numberInputHandler = function numberInputHandler(e) {\n  var _ref = e.target,\n      value = _ref.value,\n      maxLength = _ref.maxLength;\n\n  if (String(value).length >= maxLength) {\n    e.preventDefault();\n  }\n};\n\nexport default FormControl;","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/components/UI/FormElement/FormControl/FormControl.tsx"],"names":["React","classes","DropDown","ElementTypeEnum","ElementConfigTypeEnum","FormControl","props","formElement","controlClasses","FormElement","validationError","valid","touched","push","Invalid","ValidationError","label","type","TextArea","elementConfig","value","join","onChange","onLostFocus","disabled","Select","id","title","toString","options","map","option","text","onSelect","Input","keyPressHandler","Number","maxLength","onKeyPress","numberInputHandler","inputType","toLowerCase","autoComplete","undefined","e","target","String","length","preventDefault"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { ChangeEventHandler, FC, FocusEventHandler, ReactElement } from 'react';\r\n\r\nimport * as classes from './FormControl.module.scss';\r\nimport DropDown from '../../DropDown/DropDown';\r\nimport { ElementTypeEnum } from '../../../../shared/enums';\r\nimport { DropDownItem, ElementConfig } from '../../../../shared/types';\r\nimport { ElementConfigTypeEnum } from '../../../../shared/enums';\r\n\r\ninterface Props {\r\n    type: ElementTypeEnum,\r\n    id?: string,\r\n    label?: string,\r\n    title?: string,\r\n    value: string | number,\r\n    options?: DropDownItem[],\r\n    autoComplete?: boolean,\r\n    disabled?: boolean,\r\n    valid: boolean,\r\n    touched?: boolean,\r\n    elementConfig?: ElementConfig,\r\n    onChange: ChangeEventHandler<Element>,\r\n    onSelect: (id: string) => void,\r\n    onLostFocus: FocusEventHandler<Element>\r\n};\r\n\r\nconst FormControl: FC<Props> = props => {\r\n\r\n    let formElement: ReactElement;\r\n    const controlClasses: string[] = [classes.FormElement];\r\n\r\n    let validationError: ReactElement | null = null;\r\n    if (!props.valid && props.touched) {\r\n        controlClasses.push(classes.Invalid);\r\n        validationError = (\r\n            <p className={classes.ValidationError}>\r\n                Please enter a valid {props.label ? props.label : 'value'}!\r\n            </p>);\r\n    }\r\n\r\n    switch (props.type) {\r\n        case ElementTypeEnum.TextArea:\r\n            formElement =\r\n                <textarea\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    className={controlClasses.join(' ')}\r\n                    onChange={props.onChange}\r\n                    onBlur={props.onLostFocus}\r\n                    disabled={props.disabled} />;\r\n            break;\r\n        case ElementTypeEnum.Select:\r\n            formElement =\r\n                <select\r\n                    name={props.id}\r\n                    className={controlClasses.join(' ')}\r\n                    title={props.title}\r\n                    value={props.value.toString()}\r\n                    onChange={props.onChange}\r\n                    onBlur={props.onLostFocus}\r\n                    disabled={props.disabled}>\r\n                    {props.elementConfig?.options?.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.text}\r\n                        </option>\r\n                    ))}\r\n                </select>;\r\n            break;\r\n        case ElementTypeEnum.DropDown:\r\n            formElement =\r\n                <DropDown\r\n                    {...props.elementConfig}\r\n                    id={props.id}\r\n                    className={controlClasses.join(' ')}\r\n                    data={props.options!}\r\n                    value={props.value.toString()}\r\n                    title={props.title}\r\n                    disabled={props.disabled}\r\n                    onSelect={props.onSelect}\r\n                    onBlur={props.onLostFocus} />;\r\n            break;\r\n        case ElementTypeEnum.Input:\r\n        default:\r\n            //let patternConfig: { pattern: string } | undefined;\r\n            //if (props.elementConfig!.type === ElementConfigTypeEnum.Number &&\r\n            //    props.elementConfig!.maxLength &&\r\n            //    !props.elementConfig!.pattern) {\r\n            //    props.elementConfig!.type = ElementConfigTypeEnum.Text;\r\n            //    patternConfig = { pattern: \"\\\\d\".repeat(props.elementConfig!.maxLength!) };\r\n            //}\r\n            let keyPressHandler: { onKeyPress: any } | undefined;\r\n            if (props.elementConfig!.type === ElementConfigTypeEnum.Number &&\r\n                props.elementConfig!.maxLength) {\r\n                keyPressHandler = {\r\n                    onKeyPress: numberInputHandler\r\n                };\r\n            }\r\n            const inputType: string = ElementConfigTypeEnum[props.elementConfig!.type!]?.toLowerCase();\r\n            formElement =\r\n                <input\r\n                    {...props.elementConfig}\r\n                    type={inputType}\r\n                    name={props.id}\r\n                    value={props.value}\r\n                    className={controlClasses.join(' ')}\r\n                    onChange={props.onChange}\r\n                    onBlur={props.onLostFocus}\r\n                    disabled={props.disabled}\r\n                    autoComplete={props.autoComplete ? 'on' : undefined}\r\n                    {...keyPressHandler}\r\n                />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.FormControl}>\r\n            {props.label && <label>{props.label}</label>}\r\n            {formElement}\r\n            {validationError}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst numberInputHandler = (e: KeyboardEvent): void => {\r\n    const { value, maxLength } = e.target as HTMLInputElement;\r\n    if (String(value).length >= maxLength) {\r\n        e.preventDefault();\r\n    }\r\n};\r\n\r\nexport default FormControl;"]},"metadata":{},"sourceType":"module"}