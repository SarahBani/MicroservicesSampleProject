{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.store = void 0;\n\nvar toolkit_1 = require(\"@reduxjs/toolkit\");\n\nvar authReducer_1 = require(\"./reducers/authReducer\");\n\nvar commonReducer_1 = require(\"./reducers/commonReducer\");\n\nvar bankReducer_1 = require(\"./reducers/bankReducer\"); //// Whenever an action is dispatched, Redux will update each top-level application state property using\n//// the reducer with the matching name. It's important that the names match exactly, and that the reducer\n//// acts on the corresponding ApplicationState property type.\n//export const reducers = {\n//    counter: Counter.reducer,\n//    weatherForecasts: WeatherForecasts.reducer,\n//    common: commonReducer,\n//    auth: authReducer,\n//    //location: locationReducer,\n//    bank: bankReducer,\n//    //upload: uploadReducer\n//};\n//// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\n//// correctly typed to match your store.\n//export interface AppThunkAction<TAction> {\n//    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\n//}\n\n\nexports.store = toolkit_1.configureStore({\n  reducer: {\n    auth: authReducer_1.default,\n    common: commonReducer_1.default,\n    bank: bankReducer_1.default\n  }\n});","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAIA,IAAA,aAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,wBAAA,CAAA,C,CAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAKa,OAAA,CAAA,KAAA,GAAQ,SAAA,CAAA,cAAA,CAAe;AAChC,EAAA,OAAO,EAAE;AACL,IAAA,IAAI,EAAE,aAAA,CAAA,OADD;AAEL,IAAA,MAAM,EAAE,eAAA,CAAA,OAFH;AAGL,IAAA,IAAI,EAAE,aAAA,CAAA;AAHD;AADuB,CAAf,CAAR","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.store = void 0;\r\nvar toolkit_1 = require(\"@reduxjs/toolkit\");\r\nvar authReducer_1 = require(\"./reducers/authReducer\");\r\nvar commonReducer_1 = require(\"./reducers/commonReducer\");\r\nvar bankReducer_1 = require(\"./reducers/bankReducer\");\r\n//// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n//// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n//// acts on the corresponding ApplicationState property type.\r\n//export const reducers = {\r\n//    counter: Counter.reducer,\r\n//    weatherForecasts: WeatherForecasts.reducer,\r\n//    common: commonReducer,\r\n//    auth: authReducer,\r\n//    //location: locationReducer,\r\n//    bank: bankReducer,\r\n//    //upload: uploadReducer\r\n//};\r\n//// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n//// correctly typed to match your store.\r\n//export interface AppThunkAction<TAction> {\r\n//    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n//}\r\nexports.store = toolkit_1.configureStore({\r\n    reducer: {\r\n        auth: authReducer_1.default,\r\n        common: commonReducer_1.default,\r\n        bank: bankReducer_1.default,\r\n    },\r\n});\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}