{"ast":null,"code":"import _slicedToArray from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nexport default (function (httpErrorHandler) {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var reqInterceptor = httpErrorHandler.interceptors.request.use(function (req) {\n    setError(null);\n    return req;\n  });\n  var resInterceptor = httpErrorHandler.interceptors.response.use(function (res) {\n    return res;\n  }, function (err) {\n    setError(err);\n  });\n  useEffect(function () {\n    return function () {\n      httpErrorHandler.interceptors.request.eject(reqInterceptor);\n      httpErrorHandler.interceptors.response.eject(resInterceptor);\n    };\n  }, [reqInterceptor, resInterceptor]);\n\n  var clearError = function clearError() {\n    setError(null);\n  };\n\n  return [error, clearError];\n});","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/hooks/http-error-handler.ts"],"names":["useEffect","useState","httpErrorHandler","error","setError","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","err","eject","clearError"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAeA,gBAAe,UAACC,gBAAD,EAAiF;AAE5F,kBAA0BD,QAAQ,EAAlC;AAAA;AAAA,MAAOE,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,cAAc,GAAGH,gBAAgB,CAACI,YAAjB,CAA8BC,OAA9B,CAAsCC,GAAtC,CACnB,UAAAC,GAAG,EAAI;AACHL,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,WAAOK,GAAP;AACH,GAJkB,CAAvB;AAMA,MAAMC,cAAc,GAAGR,gBAAgB,CAACI,YAAjB,CAA8BK,QAA9B,CAAuCH,GAAvC,CACnB,UAAAI,GAAG;AAAA,WAAIA,GAAJ;AAAA,GADgB,EAEnB,UAAAC,GAAG,EAAI;AACHT,IAAAA,QAAQ,CAACS,GAAD,CAAR;AACH,GAJkB,CAAvB;AAOAb,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAO,YAAM;AACTE,MAAAA,gBAAgB,CAACI,YAAjB,CAA8BC,OAA9B,CAAsCO,KAAtC,CAA4CT,cAA5C;AACAH,MAAAA,gBAAgB,CAACI,YAAjB,CAA8BK,QAA9B,CAAuCG,KAAvC,CAA6CJ,cAA7C;AACH,KAHD;AAIH,GALQ,EAKN,CAACL,cAAD,EAAiBK,cAAjB,CALM,CAAT;;AAOA,MAAMK,UAAU,GAAG,SAAbA,UAAa,GAAY;AAC3BX,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIA,SAAO,CAACD,KAAD,EAAQY,UAAR,CAAP;AACH,CA7BD","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\ninterface ErrorHandlerType {\r\n    interceptors: {\r\n        request: {\r\n            use: (arg0: (req: any) => any) => any;\r\n            eject: (arg0: any) => void\r\n        },\r\n        response: {\r\n            use: (arg0: (res: any) => any, arg1: (err: any) => void) => any;\r\n            eject: (arg0: any) => void\r\n        }\r\n    }\r\n}\r\n\r\nexport default (httpErrorHandler: ErrorHandlerType): [string | null | undefined, () => void] => {\r\n\r\n    const [error, setError] = useState<string | null>();\r\n\r\n    const reqInterceptor = httpErrorHandler.interceptors.request.use(\r\n        req => {\r\n            setError(null);\r\n            return req;\r\n        });\r\n\r\n    const resInterceptor = httpErrorHandler.interceptors.response.use(\r\n        res => res,\r\n        err => {\r\n            setError(err);\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            httpErrorHandler.interceptors.request.eject(reqInterceptor);\r\n            httpErrorHandler.interceptors.response.eject(resInterceptor);\r\n        }\r\n    }, [reqInterceptor, resInterceptor]);\r\n\r\n    const clearError = (): void => {\r\n        setError(null);\r\n    }\r\n\r\n    return [error, clearError];\r\n}"]},"metadata":{},"sourceType":"module"}