{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar redux_saga_1 = require(\"redux-saga\");\n\nvar Constants = require(\"../../shared/constants\");\n\nvar uploadFileChannel = function uploadFileChannel(endpoint, file, token) {\n  return redux_saga_1.eventChannel(function (emitter) {\n    var xhr = new XMLHttpRequest();\n\n    var onProgress = function onProgress(event) {\n      if (event.lengthComputable) {\n        var progress = event.loaded / event.total * 100;\n        emitter({\n          progress: progress\n        });\n      }\n    };\n\n    var onFailure = function onFailure(event) {\n      emitter({\n        err: new Error('Upload failed')\n      });\n      emitter(redux_saga_1.END);\n    };\n\n    xhr.upload.addEventListener(\"progress\", onProgress);\n    xhr.upload.addEventListener(\"error\", onFailure);\n    xhr.upload.addEventListener(\"abort\", onFailure);\n\n    xhr.onreadystatechange = function () {\n      var readyState = xhr.readyState,\n          status = xhr.status;\n\n      if (readyState === 4) {\n        if (status === 200) {\n          console.log(xhr.responseText);\n          var response = JSON.parse(xhr.responseText);\n          console.log(55555);\n          emitter({\n            success: true //filePath: response.content\n\n          });\n          emitter(redux_saga_1.END);\n        } else {\n          console.log(555555555);\n          onFailure(null);\n        }\n      }\n    };\n\n    xhr.open(\"POST\", Constants.GATEWAY_URL + '/' + endpoint, true);\n    xhr.setRequestHeader('Authorization', \"Bearer \" + token);\n    xhr.send(file);\n    return function () {\n      console.log(6666666);\n      xhr.upload.removeEventListener(\"progress\", onProgress);\n      xhr.upload.removeEventListener(\"error\", onFailure);\n      xhr.upload.removeEventListener(\"abort\", onFailure);\n      xhr.onreadystatechange = null;\n      xhr.abort();\n    };\n  }, redux_saga_1.buffers.sliding(2));\n};\n\nexports.default = uploadFileChannel;","map":{"version":3,"sources":["uploadFileChannel.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAWA,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,QAAD,EAAmB,IAAnB,EAAmC,KAAnC,EAAgD;AAEtE,SAAO,YAAA,CAAA,YAAA,CAAa,UAAA,OAAA,EAAO;AACvB,QAAM,GAAG,GAAmB,IAAI,cAAJ,EAA5B;;AACA,QAAM,UAAU,GAAG,SAAb,UAAa,CAAC,KAAD,EAAW;AAC1B,UAAI,KAAK,CAAC,gBAAV,EAA4B;AACxB,YAAM,QAAQ,GAAW,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,KAArB,GAA6B,GAAtD;AACA,QAAA,OAAO,CAAC;AAAE,UAAA,QAAQ,EAAA;AAAV,SAAD,CAAP;AACH;AACJ,KALD;;AAMA,QAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,KAAD,EAAW;AACzB,MAAA,OAAO,CAAC;AAAE,QAAA,GAAG,EAAE,IAAI,KAAJ,CAAU,eAAV;AAAP,OAAD,CAAP;AACA,MAAA,OAAO,CAAC,YAAA,CAAA,GAAD,CAAP;AACH,KAHD;;AAIA,IAAA,GAAG,CAAC,MAAJ,CAAW,gBAAX,CAA4B,UAA5B,EAAwC,UAAxC;AACA,IAAA,GAAG,CAAC,MAAJ,CAAW,gBAAX,CAA4B,OAA5B,EAAqC,SAArC;AACA,IAAA,GAAG,CAAC,MAAJ,CAAW,gBAAX,CAA4B,OAA5B,EAAqC,SAArC;;AACA,IAAA,GAAG,CAAC,kBAAJ,GAAyB,YAAA;AACb,UAAA,UAAU,GAAa,GAAG,CAAhB,UAAV;AAAA,UAAY,MAAM,GAAK,GAAG,CAAR,MAAlB;;AACR,UAAI,UAAU,KAAK,CAAnB,EAAsB;AAClB,YAAI,MAAM,KAAK,GAAf,EAAoB;AAChB,UAAA,OAAO,CAAC,GAAR,CAAY,GAAG,CAAC,YAAhB;AACA,cAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,YAAf,CAAjB;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACA,UAAA,OAAO,CAAC;AACJ,YAAA,OAAO,EAAE,IADL,CAEJ;;AAFI,WAAD,CAAP;AAIA,UAAA,OAAO,CAAC,YAAA,CAAA,GAAD,CAAP;AACH,SATD,MAUK;AACD,UAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACA,UAAA,SAAS,CAAC,IAAD,CAAT;AACH;AACJ;AACJ,KAlBD;;AAmBA,IAAA,GAAG,CAAC,IAAJ,CAAS,MAAT,EAAiB,SAAS,CAAC,WAAV,GAAwB,GAAxB,GAA8B,QAA/C,EAAyD,IAAzD;AACA,IAAA,GAAG,CAAC,gBAAJ,CAAqB,eAArB,EAAsC,YAAU,KAAhD;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,IAAT;AACA,WAAO,YAAA;AACH,MAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACA,MAAA,GAAG,CAAC,MAAJ,CAAW,mBAAX,CAA+B,UAA/B,EAA2C,UAA3C;AACA,MAAA,GAAG,CAAC,MAAJ,CAAW,mBAAX,CAA+B,OAA/B,EAAwC,SAAxC;AACA,MAAA,GAAG,CAAC,MAAJ,CAAW,mBAAX,CAA+B,OAA/B,EAAwC,SAAxC;AACA,MAAA,GAAG,CAAC,kBAAJ,GAAyB,IAAzB;AACA,MAAA,GAAG,CAAC,KAAJ;AACH,KAPD;AAQH,GA7CM,EA6CJ,YAAA,CAAA,OAAA,CAAQ,OAAR,CAAgB,CAAhB,CA7CI,CAAP;AA8CH,CAhDD;;AAkDA,OAAA,CAAA,OAAA,GAAe,iBAAf","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar redux_saga_1 = require(\"redux-saga\");\r\nvar Constants = require(\"../../shared/constants\");\r\nvar uploadFileChannel = function (endpoint, file, token) {\r\n    return redux_saga_1.eventChannel(function (emitter) {\r\n        var xhr = new XMLHttpRequest();\r\n        var onProgress = function (event) {\r\n            if (event.lengthComputable) {\r\n                var progress = event.loaded / event.total * 100;\r\n                emitter({ progress: progress });\r\n            }\r\n        };\r\n        var onFailure = function (event) {\r\n            emitter({ err: new Error('Upload failed') });\r\n            emitter(redux_saga_1.END);\r\n        };\r\n        xhr.upload.addEventListener(\"progress\", onProgress);\r\n        xhr.upload.addEventListener(\"error\", onFailure);\r\n        xhr.upload.addEventListener(\"abort\", onFailure);\r\n        xhr.onreadystatechange = function () {\r\n            var readyState = xhr.readyState, status = xhr.status;\r\n            if (readyState === 4) {\r\n                if (status === 200) {\r\n                    console.log(xhr.responseText);\r\n                    var response = JSON.parse(xhr.responseText);\r\n                    console.log(55555);\r\n                    emitter({\r\n                        success: true,\r\n                        //filePath: response.content\r\n                    });\r\n                    emitter(redux_saga_1.END);\r\n                }\r\n                else {\r\n                    console.log(555555555);\r\n                    onFailure(null);\r\n                }\r\n            }\r\n        };\r\n        xhr.open(\"POST\", Constants.GATEWAY_URL + '/' + endpoint, true);\r\n        xhr.setRequestHeader('Authorization', \"Bearer \" + token);\r\n        xhr.send(file);\r\n        return function () {\r\n            console.log(6666666);\r\n            xhr.upload.removeEventListener(\"progress\", onProgress);\r\n            xhr.upload.removeEventListener(\"error\", onFailure);\r\n            xhr.upload.removeEventListener(\"abort\", onFailure);\r\n            xhr.onreadystatechange = null;\r\n            xhr.abort();\r\n        };\r\n    }, redux_saga_1.buffers.sliding(2));\r\n};\r\nexports.default = uploadFileChannel;\r\n//# sourceMappingURL=uploadFileChannel.js.map"]},"metadata":{},"sourceType":"module"}