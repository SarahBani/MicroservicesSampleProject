{"ast":null,"code":"import _regeneratorRuntime from \"H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(signInSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(signOutSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(checkAuthTimeoutSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(autoSignInSaga);\n\nimport { put, call, all } from 'redux-saga/effects';\nimport axiosInstance from '../../shared/axios-instance';\nimport * as actions from '../actions/authActions';\nimport * as commonActions from '../actions/commonActions';\nimport * as Constants from \"../../shared/constants\";\nvar authStorageKeyName = 'auth_token';\nexport var delay = function delay(ms) {\n  return new Promise(function (res) {\n    return setTimeout(res, ms);\n  });\n};\nexport function signInSaga(action) {\n  var data, response, authResponse, user, _response$data;\n\n  return _regeneratorRuntime.wrap(function signInSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return put(commonActions.showLoader());\n\n        case 2:\n          data = {\n            email: action.email,\n            password: action.password\n          };\n          _context.prev = 3;\n          _context.next = 6;\n          return axiosInstance.post('/login', data);\n\n        case 6:\n          response = _context.sent;\n\n          if (!((response === null || response === void 0 ? void 0 : response.status) === 200)) {\n            _context.next = 20;\n            break;\n          }\n\n          _context.next = 10;\n          return localStorage.setItem(authStorageKeyName, JSON.stringify(response.data));\n\n        case 10:\n          authResponse = response.data;\n          user = {\n            email: authResponse.email\n          };\n          _context.next = 14;\n          return call([localStorage, 'setItem'], authStorageKeyName, JSON.stringify(authResponse));\n\n        case 14:\n          _context.next = 16;\n          return put(actions.signInSucceeded(authResponse.token, user));\n\n        case 16:\n          _context.next = 18;\n          return put(actions.checkAuthTimeout(authResponse.tokenExpiration));\n\n        case 18:\n          _context.next = 22;\n          break;\n\n        case 20:\n          _context.next = 22;\n          return put(commonActions.raiseError({\n            message: (_response$data = response === null || response === void 0 ? void 0 : response.data) !== null && _response$data !== void 0 ? _response$data : Constants.ERROR_UNKNOWN\n          }));\n\n        case 22:\n          _context.next = 24;\n          return put(commonActions.hideLoader());\n\n        case 24:\n          _context.next = 30;\n          break;\n\n        case 26:\n          _context.prev = 26;\n          _context.t0 = _context[\"catch\"](3);\n          _context.next = 30;\n          return put(commonActions.raiseError(_context.t0));\n\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 26]]);\n}\nexport function signOutSaga() {\n  return _regeneratorRuntime.wrap(function signOutSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([//localStorage.removeItem(authStorageKeyName),\n          call([localStorage, 'removeItem'], authStorageKeyName), put(actions.stopAuthTimer())]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function checkAuthTimeoutSaga(action) {\n  var duration;\n  return _regeneratorRuntime.wrap(function checkAuthTimeoutSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return new Date(action.tokenExpiration).getTime() - new Date().getTime();\n\n        case 2:\n          duration = _context3.sent;\n          _context3.next = 5;\n          return call(delay, duration);\n\n        case 5:\n          _context3.next = 7;\n          return put(actions.signOut());\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function autoSignInSaga() {\n  var authResponse, expirationDateTime, user;\n  return _regeneratorRuntime.wrap(function autoSignInSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.t0 = JSON;\n          _context4.next = 3;\n          return call([localStorage, 'getItem'], authStorageKeyName);\n\n        case 3:\n          _context4.t1 = _context4.sent;\n          authResponse = _context4.t0.parse.call(_context4.t0, _context4.t1);\n\n          if (!authResponse) {\n            _context4.next = 17;\n            break;\n          }\n\n          expirationDateTime = new Date(authResponse.tokenExpiration);\n\n          if (!(expirationDateTime > new Date())) {\n            _context4.next = 15;\n            break;\n          }\n\n          user = {\n            email: authResponse.email\n          };\n          _context4.next = 11;\n          return put(actions.signInSucceeded(authResponse.token, user));\n\n        case 11:\n          _context4.next = 13;\n          return put(actions.checkAuthTimeout(authResponse.tokenExpiration));\n\n        case 13:\n          _context4.next = 17;\n          break;\n\n        case 15:\n          _context4.next = 17;\n          return put(actions.signOut());\n\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/store/sagas/auth.ts"],"names":["signInSaga","signOutSaga","checkAuthTimeoutSaga","autoSignInSaga","put","call","all","axiosInstance","actions","commonActions","Constants","authStorageKeyName","delay","ms","Promise","res","setTimeout","action","showLoader","data","email","password","post","response","status","localStorage","setItem","JSON","stringify","authResponse","user","signInSucceeded","token","checkAuthTimeout","tokenExpiration","raiseError","message","ERROR_UNKNOWN","hideLoader","stopAuthTimer","Date","getTime","duration","signOut","parse","expirationDateTime"],"mappings":"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","sourcesContent":["import { put, call, all } from 'redux-saga/effects';\r\n\r\nimport axiosInstance from '../../shared/axios-instance';\r\nimport * as actions from '../actions/authActions';\r\nimport * as commonActions from '../actions/commonActions';\r\nimport { ResponseGenerator } from '../../models/ResponseGenerator.model';\r\nimport { User } from '../../models/User.model';\r\nimport { AuthResponse } from '../../models/AuthResponse';\r\nimport * as Constants from \"../../shared/constants\";\r\n\r\nconst authStorageKeyName: string = 'auth_token';\r\n\r\nexport const delay = (ms: number): Promise<NodeJS.Timeout> =>\r\n    new Promise(res => setTimeout(res, ms));\r\n\r\nexport function* signInSaga(action: any) {\r\n    yield put(commonActions.showLoader());\r\n    const data = {\r\n        email: action.email,\r\n        password: action.password\r\n    };\r\n    try {\r\n        const response: ResponseGenerator = yield axiosInstance.post('/login', data);\r\n        if (response?.status === 200) {\r\n            yield localStorage.setItem(authStorageKeyName, JSON.stringify(response.data));\r\n            const authResponse: AuthResponse = response.data;\r\n            const user: User = {\r\n                email: authResponse.email\r\n            };\r\n            yield call([localStorage, 'setItem'], authStorageKeyName, JSON.stringify(authResponse));\r\n            yield put(actions.signInSucceeded(authResponse.token, user));\r\n            yield put(actions.checkAuthTimeout(authResponse.tokenExpiration));\r\n        }\r\n        else {\r\n            yield put(commonActions.raiseError({\r\n                message: response?.data ?? Constants.ERROR_UNKNOWN\r\n            }));\r\n        }\r\n        yield put(commonActions.hideLoader());\r\n    } catch (error) {\r\n        yield put(commonActions.raiseError(error));\r\n    }\r\n}\r\n\r\nexport function* signOutSaga() {\r\n    yield all([\r\n        //localStorage.removeItem(authStorageKeyName),\r\n        call([localStorage, 'removeItem'], authStorageKeyName),\r\n        put(actions.stopAuthTimer()),\r\n    ]);\r\n}\r\n\r\nexport function* checkAuthTimeoutSaga(action: any) {\r\n    const duration: number = yield (new Date(action.tokenExpiration).getTime() - new Date().getTime());\r\n    //delay(duration);\r\n    yield call(delay, duration);\r\n    yield put(actions.signOut());\r\n}\r\n\r\nexport function* autoSignInSaga() {\r\n    //const authResponse = yield JSON.parse(localStorage.getItem(authStorageKeyName));\r\n    const authResponse: AuthResponse = JSON.parse(yield call([localStorage, 'getItem'], authStorageKeyName));\r\n    if (authResponse) {\r\n        const expirationDateTime = new Date(authResponse.tokenExpiration);\r\n        if (expirationDateTime > new Date()) {\r\n            const user: User = {\r\n                email: authResponse.email\r\n            };\r\n            yield put(actions.signInSucceeded(authResponse.token, user));\r\n            yield put(actions.checkAuthTimeout(authResponse.tokenExpiration));\r\n        }\r\n        else {\r\n            yield put(actions.signOut());\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}