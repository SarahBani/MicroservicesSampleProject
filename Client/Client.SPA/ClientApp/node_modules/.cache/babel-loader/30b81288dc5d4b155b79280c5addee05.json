{"ast":null,"code":"import { buffers, eventChannel, END } from 'redux-saga';\n\nvar uploadFileChannel = function uploadFileChannel(endpoint, file, token) {\n  return eventChannel(function (emitter) {\n    var xhr = new XMLHttpRequest();\n\n    var onProgress = function onProgress(event) {\n      if (event.lengthComputable) {\n        var progress = event.loaded / event.total * 100;\n        emitter({\n          progress: progress\n        });\n      }\n    };\n\n    var onFailure = function onFailure(event) {\n      emitter({\n        err: new Error('Upload failed')\n      });\n      emitter(END);\n    };\n\n    xhr.upload.addEventListener(\"progress\", onProgress);\n    xhr.upload.addEventListener(\"error\", onFailure);\n    xhr.upload.addEventListener(\"abort\", onFailure);\n\n    xhr.onreadystatechange = function () {\n      var readyState = xhr.readyState,\n          status = xhr.status;\n\n      if (readyState === 4) {\n        if (status === 200) {\n          var response = JSON.parse(xhr.responseText);\n\n          if (response.isSuccessful) {\n            emitter({\n              success: true //filePath: response.content\n\n            });\n            emitter(END);\n          } else {\n            onFailure(null);\n          }\n        } else {\n          onFailure(null);\n        }\n      }\n    };\n\n    xhr.open(\"POST\", endpoint, true);\n    xhr.setRequestHeader('Authorization', \"Bearer \".concat(token));\n    xhr.send(file);\n    return function () {\n      xhr.upload.removeEventListener(\"progress\", onProgress);\n      xhr.upload.removeEventListener(\"error\", onFailure);\n      xhr.upload.removeEventListener(\"abort\", onFailure);\n      xhr.onreadystatechange = null;\n      xhr.abort();\n    };\n  }, buffers.sliding(2));\n};\n\nexport default uploadFileChannel;","map":{"version":3,"sources":["H:/Project/Microservices/MicroservicesSampleProject/Client/Client.SPA/ClientApp/src/store/sagas/uploadFileChannel.ts"],"names":["buffers","eventChannel","END","uploadFileChannel","endpoint","file","token","emitter","xhr","XMLHttpRequest","onProgress","event","lengthComputable","progress","loaded","total","onFailure","err","Error","upload","addEventListener","onreadystatechange","readyState","status","response","JSON","parse","responseText","isSuccessful","success","open","setRequestHeader","send","removeEventListener","abort","sliding"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,YAAlB,EAAgCC,GAAhC,QAAyD,YAAzD;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,KAAjB,EAA6C;AACnE,SAAOL,YAAY,CAAC,UAAAM,OAAO,EAAI;AAC3B,QAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;;AACA,QAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAe;AAC9B,UAAIA,KAAK,CAACC,gBAAV,EAA4B;AACxB,YAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,GAAeH,KAAK,CAACI,KAArB,GAA6B,GAA9C;AACAR,QAAAA,OAAO,CAAC;AAAEM,UAAAA,QAAQ,EAARA;AAAF,SAAD,CAAP;AACH;AACJ,KALD;;AAMA,QAAMG,SAAS,GAAG,SAAZA,SAAY,CAACL,KAAD,EAAgB;AAC9BJ,MAAAA,OAAO,CAAC;AAAEU,QAAAA,GAAG,EAAE,IAAIC,KAAJ,CAAU,eAAV;AAAP,OAAD,CAAP;AACAX,MAAAA,OAAO,CAACL,GAAD,CAAP;AACH,KAHD;;AAIAM,IAAAA,GAAG,CAACW,MAAJ,CAAWC,gBAAX,CAA4B,UAA5B,EAAwCV,UAAxC;AACAF,IAAAA,GAAG,CAACW,MAAJ,CAAWC,gBAAX,CAA4B,OAA5B,EAAqCJ,SAArC;AACAR,IAAAA,GAAG,CAACW,MAAJ,CAAWC,gBAAX,CAA4B,OAA5B,EAAqCJ,SAArC;;AACAR,IAAAA,GAAG,CAACa,kBAAJ,GAAyB,YAAM;AAC3B,UAAQC,UAAR,GAA+Bd,GAA/B,CAAQc,UAAR;AAAA,UAAoBC,MAApB,GAA+Bf,GAA/B,CAAoBe,MAApB;;AACA,UAAID,UAAU,KAAK,CAAnB,EAAsB;AAClB,YAAIC,MAAM,KAAK,GAAf,EAAoB;AAChB,cAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWlB,GAAG,CAACmB,YAAf,CAAjB;;AACA,cAAIH,QAAQ,CAACI,YAAb,EAA2B;AACvBrB,YAAAA,OAAO,CAAC;AACJsB,cAAAA,OAAO,EAAE,IADL,CAEJ;;AAFI,aAAD,CAAP;AAIAtB,YAAAA,OAAO,CAACL,GAAD,CAAP;AACH,WAND,MAOK;AACDc,YAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AACJ,SAZD,MAaK;AACDA,UAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AACJ;AACJ,KApBD;;AAqBAR,IAAAA,GAAG,CAACsB,IAAJ,CAAS,MAAT,EAAiB1B,QAAjB,EAA2B,IAA3B;AACAI,IAAAA,GAAG,CAACuB,gBAAJ,CAAqB,eAArB,mBAAgDzB,KAAhD;AACAE,IAAAA,GAAG,CAACwB,IAAJ,CAAS3B,IAAT;AACA,WAAO,YAAM;AACTG,MAAAA,GAAG,CAACW,MAAJ,CAAWc,mBAAX,CAA+B,UAA/B,EAA2CvB,UAA3C;AACAF,MAAAA,GAAG,CAACW,MAAJ,CAAWc,mBAAX,CAA+B,OAA/B,EAAwCjB,SAAxC;AACAR,MAAAA,GAAG,CAACW,MAAJ,CAAWc,mBAAX,CAA+B,OAA/B,EAAwCjB,SAAxC;AACAR,MAAAA,GAAG,CAACa,kBAAJ,GAAyB,IAAzB;AACAb,MAAAA,GAAG,CAAC0B,KAAJ;AACH,KAND;AAOH,GA9CkB,EA8ChBlC,OAAO,CAACmC,OAAR,CAAgB,CAAhB,CA9CgB,CAAnB;AA+CH,CAhDD;;AAkDA,eAAehC,iBAAf","sourcesContent":["import { buffers, eventChannel, END, EventChannel } from 'redux-saga';\r\n\r\nconst uploadFileChannel = (endpoint, file, token):EventChannel<any> => {\r\n    return eventChannel(emitter => {\r\n        const xhr = new XMLHttpRequest();\r\n        const onProgress = (event:any) => {\r\n            if (event.lengthComputable) {\r\n                const progress = event.loaded / event.total * 100;\r\n                emitter({ progress });\r\n            }\r\n        };\r\n        const onFailure = (event: any) => {\r\n            emitter({ err: new Error('Upload failed') });\r\n            emitter(END);\r\n        };\r\n        xhr.upload.addEventListener(\"progress\", onProgress);\r\n        xhr.upload.addEventListener(\"error\", onFailure);\r\n        xhr.upload.addEventListener(\"abort\", onFailure);\r\n        xhr.onreadystatechange = () => {\r\n            const { readyState, status } = xhr;\r\n            if (readyState === 4) {\r\n                if (status === 200) {\r\n                    const response = JSON.parse(xhr.responseText);\r\n                    if (response.isSuccessful) {\r\n                        emitter({\r\n                            success: true,\r\n                            //filePath: response.content\r\n                        });\r\n                        emitter(END);\r\n                    }\r\n                    else {\r\n                        onFailure(null);\r\n                    }\r\n                }\r\n                else {\r\n                    onFailure(null);\r\n                }\r\n            }\r\n        };\r\n        xhr.open(\"POST\", endpoint, true);\r\n        xhr.setRequestHeader('Authorization', `Bearer ${token}`);\r\n        xhr.send(file);\r\n        return () => {\r\n            xhr.upload.removeEventListener(\"progress\", onProgress);\r\n            xhr.upload.removeEventListener(\"error\", onFailure);\r\n            xhr.upload.removeEventListener(\"abort\", onFailure);\r\n            xhr.onreadystatechange = null;\r\n            xhr.abort();\r\n        };\r\n    }, buffers.sliding(2));\r\n};\r\n\r\nexport default uploadFileChannel;"]},"metadata":{},"sourceType":"module"}