{"ast":null,"code":"\"use strict\"; // In production, we register a service worker to serve assets from local cache.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unregister = void 0; // This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var url = process.env.PUBLIC_URL;\n    var publicUrl = new URL(url, window.location.toString());\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = process.env.PUBLIC_URL + \"/service-worker.js\";\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexports.default = register;\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log('New content is available; please refresh.');\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nfunction unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}\n\nexports.unregister = unregister;","map":{"version":3,"sources":["registerServiceWorker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// In production, we register a service worker to serve assets from local cache.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.unregister = void 0;\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\r\nfunction register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        var url = process.env.PUBLIC_URL;\r\n        var publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n        window.addEventListener('load', function () {\r\n            var swUrl = process.env.PUBLIC_URL + \"/service-worker.js\";\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            }\r\n            else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.default = register;\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(function (registration) {\r\n        registration.onupdatefound = function () {\r\n            var installingWorker = registration.installing;\r\n            installingWorker.onstatechange = function () {\r\n                if (installingWorker.state === 'installed') {\r\n                    if (navigator.serviceWorker.controller) {\r\n                        // At this point, the old content will have been purged and\r\n                        // the fresh content will have been added to the cache.\r\n                        // It's the perfect time to display a \"New content is\r\n                        // available; please refresh.\" message in your web app.\r\n                        console.log('New content is available; please refresh.');\r\n                    }\r\n                    else {\r\n                        // At this point, everything has been precached.\r\n                        // It's the perfect time to display a\r\n                        // \"Content is cached for offline use.\" message.\r\n                        console.log('Content is cached for offline use.');\r\n                    }\r\n                }\r\n            };\r\n        };\r\n    })\r\n        .catch(function (error) {\r\n        console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(function (response) {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        var contentType = response.headers.get('content-type');\r\n        if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n            // No service worker found. Probably a different app. Reload the page.\r\n            navigator.serviceWorker.ready.then(function (registration) {\r\n                registration.unregister().then(function () {\r\n                    window.location.reload();\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            // Service worker found. Proceed as normal.\r\n            registerValidSW(swUrl);\r\n        }\r\n    })\r\n        .catch(function () {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\nfunction unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(function (registration) {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\nexports.unregister = unregister;\r\n//# sourceMappingURL=registerServiceWorker.js.map"]},"metadata":{},"sourceType":"module"}