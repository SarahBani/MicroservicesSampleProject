{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reducer = exports.actionCreators = void 0; // ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\n\nexports.actionCreators = {\n  requestWeatherForecasts: function requestWeatherForecasts(startDateIndex) {\n    return function (dispatch, getState) {\n      // Only load data if it's something we don't already have (and are not already loading)\n      var appState = getState();\n\n      if (appState && appState.weatherForecasts && startDateIndex !== appState.weatherForecasts.startDateIndex) {\n        fetch(\"weatherforecast\").then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          dispatch({\n            type: 'RECEIVE_WEATHER_FORECASTS',\n            startDateIndex: startDateIndex,\n            forecasts: data\n          });\n        });\n        dispatch({\n          type: 'REQUEST_WEATHER_FORECASTS',\n          startDateIndex: startDateIndex\n        });\n      }\n    };\n  }\n}; // ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nvar unloadedState = {\n  forecasts: [],\n  isLoading: false\n};\n\nvar reducer = function reducer(state, incomingAction) {\n  if (state === undefined) {\n    return unloadedState;\n  }\n\n  var action = incomingAction;\n\n  switch (action.type) {\n    case 'REQUEST_WEATHER_FORECASTS':\n      return {\n        startDateIndex: action.startDateIndex,\n        forecasts: state.forecasts,\n        isLoading: true\n      };\n\n    case 'RECEIVE_WEATHER_FORECASTS':\n      // Only accept the incoming data if it matches the most recent request. This ensures we correctly\n      // handle out-of-order responses.\n      if (action.startDateIndex === state.startDateIndex) {\n        return {\n          startDateIndex: action.startDateIndex,\n          forecasts: action.forecasts,\n          isLoading: false\n        };\n      }\n\n      break;\n  }\n\n  return state;\n};\n\nexports.reducer = reducer;","map":{"version":3,"sources":["WeatherForecasts.ts"],"names":[],"mappings":";;;;;mDAsCA;AACA;AACA;;AAEa,OAAA,CAAA,cAAA,GAAiB;AAC1B,EAAA,uBAAuB,EAAE,iCAAC,cAAD,EAAuB;AAAkC,WAAA,UAAC,QAAD,EAAW,QAAX,EAAmB;AACjG;AACA,UAAM,QAAQ,GAAG,QAAQ,EAAzB;;AACA,UAAI,QAAQ,IAAI,QAAQ,CAAC,gBAArB,IAAyC,cAAc,KAAK,QAAQ,CAAC,gBAAT,CAA0B,cAA1F,EAA0G;AACtG,QAAA,KAAK,CAAC,iBAAD,CAAL,CACK,IADL,CACU,UAAA,QAAA,EAAQ;AAAI,iBAAA,QAAQ,CAAR,IAAA,EAAA;AAA6C,SADnE,EAEK,IAFL,CAEU,UAAA,IAAA,EAAI;AACN,UAAA,QAAQ,CAAC;AAAE,YAAA,IAAI,EAAE,2BAAR;AAAqC,YAAA,cAAc,EAAE,cAArD;AAAqE,YAAA,SAAS,EAAE;AAAhF,WAAD,CAAR;AACH,SAJL;AAMA,QAAA,QAAQ,CAAC;AAAE,UAAA,IAAI,EAAE,2BAAR;AAAqC,UAAA,cAAc,EAAE;AAArD,SAAD,CAAR;AACH;AAX6E,KAAA;AAYjF;AAbyB,CAAjB,C,CAgBb;AACA;;AAEA,IAAM,aAAa,GAA0B;AAAE,EAAA,SAAS,EAAE,EAAb;AAAiB,EAAA,SAAS,EAAE;AAA5B,CAA7C;;AAEO,IAAM,OAAO,GAAmC,SAA1C,OAA0C,CAAC,KAAD,EAA2C,cAA3C,EAAiE;AACpH,MAAI,KAAK,KAAK,SAAd,EAAyB;AACrB,WAAO,aAAP;AACH;;AAED,MAAM,MAAM,GAAG,cAAf;;AACA,UAAQ,MAAM,CAAC,IAAf;AACI,SAAK,2BAAL;AACI,aAAO;AACH,QAAA,cAAc,EAAE,MAAM,CAAC,cADpB;AAEH,QAAA,SAAS,EAAE,KAAK,CAAC,SAFd;AAGH,QAAA,SAAS,EAAE;AAHR,OAAP;;AAKJ,SAAK,2BAAL;AACI;AACA;AACA,UAAI,MAAM,CAAC,cAAP,KAA0B,KAAK,CAAC,cAApC,EAAoD;AAChD,eAAO;AACH,UAAA,cAAc,EAAE,MAAM,CAAC,cADpB;AAEH,UAAA,SAAS,EAAE,MAAM,CAAC,SAFf;AAGH,UAAA,SAAS,EAAE;AAHR,SAAP;AAKH;;AACD;AAjBR;;AAoBA,SAAO,KAAP;AACH,CA3BM;;AAAM,OAAA,CAAA,OAAA,GAAO,OAAP","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.reducer = exports.actionCreators = void 0;\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\nexports.actionCreators = {\r\n    requestWeatherForecasts: function (startDateIndex) { return function (dispatch, getState) {\r\n        // Only load data if it's something we don't already have (and are not already loading)\r\n        var appState = getState();\r\n        if (appState && appState.weatherForecasts && startDateIndex !== appState.weatherForecasts.startDateIndex) {\r\n            fetch(\"weatherforecast\")\r\n                .then(function (response) { return response.json(); })\r\n                .then(function (data) {\r\n                dispatch({ type: 'RECEIVE_WEATHER_FORECASTS', startDateIndex: startDateIndex, forecasts: data });\r\n            });\r\n            dispatch({ type: 'REQUEST_WEATHER_FORECASTS', startDateIndex: startDateIndex });\r\n        }\r\n    }; }\r\n};\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\nvar unloadedState = { forecasts: [], isLoading: false };\r\nvar reducer = function (state, incomingAction) {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n    var action = incomingAction;\r\n    switch (action.type) {\r\n        case 'REQUEST_WEATHER_FORECASTS':\r\n            return {\r\n                startDateIndex: action.startDateIndex,\r\n                forecasts: state.forecasts,\r\n                isLoading: true\r\n            };\r\n        case 'RECEIVE_WEATHER_FORECASTS':\r\n            // Only accept the incoming data if it matches the most recent request. This ensures we correctly\r\n            // handle out-of-order responses.\r\n            if (action.startDateIndex === state.startDateIndex) {\r\n                return {\r\n                    startDateIndex: action.startDateIndex,\r\n                    forecasts: action.forecasts,\r\n                    isLoading: false\r\n                };\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n};\r\nexports.reducer = reducer;\r\n//# sourceMappingURL=WeatherForecasts.js.map"]},"metadata":{},"sourceType":"module"}