{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar axios_1 = require(\"axios\");\n\nvar utility_1 = require(\"./utility\");\n\nvar Constants = require(\"./constants\"); //import * as https from 'https';\n//const httpsAgent = new https.Agent({ rejectUnauthorized: false });\n\n\nvar cancelSource = axios_1.default.CancelToken.source();\nvar axiosInstance = axios_1.default.create({\n  baseURL: Constants.GATEWAY_URL //cancelToken: cancelSource.token\n  //httpsAgent: httpsAgent\n\n}); //instance.default.headers.common['Authorization'] = 'Auth Token dgdfgdfg';\n//instance.default.headers.post['Content-Type'] = 'application/json';\n\nvar redundantErrorMessage = 'Error: Request failed with status code ';\naxiosInstance.interceptors.request.use(function (requestConfig) {\n  return requestConfig;\n}, function (error) {\n  console.log('axiosInstance request error');\n  console.log(error);\n  var httpErrorMessage = getHttpErrorMessage(error);\n  console.log(httpErrorMessage);\n  return Promise.reject(httpErrorMessage);\n});\naxiosInstance.interceptors.response.use(function (responseConfig) {\n  return responseConfig;\n}, function (error) {\n  console.log('axiosInstance response error');\n  console.log(error);\n  var httpErrorMessage = getHttpErrorMessage(error);\n  console.log(httpErrorMessage);\n  return Promise.reject(httpErrorMessage);\n});\n\nvar getHttpErrorMessage = function getHttpErrorMessage(error) {\n  var errorCode = parseInt(error.toString().replace(redundantErrorMessage, ''));\n  var httpError = errorCode;\n  return utility_1.getErrorMessage(httpError);\n};\n\nexports.default = axiosInstance;","map":{"version":3,"sources":["axios-instance.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,aAAA,CAAA,C,CACA;AAEA;;;AACA,IAAM,YAAY,GAAG,OAAA,CAAA,OAAA,CAAM,WAAN,CAAkB,MAAlB,EAArB;AAEA,IAAM,aAAa,GAAkB,OAAA,CAAA,OAAA,CAAM,MAAN,CAAa;AAC9C,EAAA,OAAO,EAAE,SAAS,CAAC,WAD2B,CAE9C;AACA;;AAH8C,CAAb,CAArC,C,CAMA;AACA;;AAEA,IAAM,qBAAqB,GAAG,yCAA9B;AAEA,aAAa,CAAC,YAAd,CAA2B,OAA3B,CAAmC,GAAnC,CAAuC,UAAC,aAAD,EAAkC;AACrE,SAAO,aAAP;AACH,CAFD,EAEG,UAAC,KAAD,EAAW;AACV,EAAA,OAAO,CAAC,GAAR,CAAY,6BAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACA,MAAM,gBAAgB,GAAW,mBAAmB,CAAC,KAAD,CAApD;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ;AACA,SAAO,OAAO,CAAC,MAAR,CAAe,gBAAf,CAAP;AACH,CARD;AAUA,aAAa,CAAC,YAAd,CAA2B,QAA3B,CAAoC,GAApC,CAAwC,UAAC,cAAD,EAA8B;AAClE,SAAO,cAAP;AACH,CAFD,EAEG,UAAC,KAAD,EAAW;AACV,EAAA,OAAO,CAAC,GAAR,CAAY,8BAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACA,MAAM,gBAAgB,GAAW,mBAAmB,CAAC,KAAD,CAApD;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ;AACA,SAAO,OAAO,CAAC,MAAR,CAAe,gBAAf,CAAP;AACH,CARD;;AAUA,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,KAAD,EAAW;AACnC,MAAM,SAAS,GAAW,QAAQ,CAAC,KAAK,CAAC,QAAN,GAAiB,OAAjB,CAAyB,qBAAzB,EAAgD,EAAhD,CAAD,CAAlC;AACA,MAAM,SAAS,GAAkB,SAAjC;AACA,SAAO,SAAA,CAAA,eAAA,CAAgB,SAAhB,CAAP;AACH,CAJD;;AAMA,OAAA,CAAA,OAAA,GAAe,aAAf","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar axios_1 = require(\"axios\");\r\nvar utility_1 = require(\"./utility\");\r\nvar Constants = require(\"./constants\");\r\n//import * as https from 'https';\r\n//const httpsAgent = new https.Agent({ rejectUnauthorized: false });\r\nvar cancelSource = axios_1.default.CancelToken.source();\r\nvar axiosInstance = axios_1.default.create({\r\n    baseURL: Constants.GATEWAY_URL,\r\n    //cancelToken: cancelSource.token\r\n    //httpsAgent: httpsAgent\r\n});\r\n//instance.default.headers.common['Authorization'] = 'Auth Token dgdfgdfg';\r\n//instance.default.headers.post['Content-Type'] = 'application/json';\r\nvar redundantErrorMessage = 'Error: Request failed with status code ';\r\naxiosInstance.interceptors.request.use(function (requestConfig) {\r\n    return requestConfig;\r\n}, function (error) {\r\n    console.log('axiosInstance request error');\r\n    console.log(error);\r\n    var httpErrorMessage = getHttpErrorMessage(error);\r\n    console.log(httpErrorMessage);\r\n    return Promise.reject(httpErrorMessage);\r\n});\r\naxiosInstance.interceptors.response.use(function (responseConfig) {\r\n    return responseConfig;\r\n}, function (error) {\r\n    console.log('axiosInstance response error');\r\n    console.log(error);\r\n    var httpErrorMessage = getHttpErrorMessage(error);\r\n    console.log(httpErrorMessage);\r\n    return Promise.reject(httpErrorMessage);\r\n});\r\nvar getHttpErrorMessage = function (error) {\r\n    var errorCode = parseInt(error.toString().replace(redundantErrorMessage, ''));\r\n    var httpError = errorCode;\r\n    return utility_1.getErrorMessage(httpError);\r\n};\r\nexports.default = axiosInstance;\r\n//# sourceMappingURL=axios-instance.js.map"]},"metadata":{},"sourceType":"module"}